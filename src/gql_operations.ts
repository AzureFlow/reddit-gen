const GQL_FIELDS: { [key: string]: { id: string; operation: string; } } = {
    ActiveLanguages: {
        id: "dbac6251dd21",
        operation: "query ActiveLanguages { activeLanguages { name isoCode } }",
    },
    AddPredictionDrafts: {
        id: "dc41a094c33d",
        operation: "mutation AddPredictionDrafts($input: AddPredictionDraftsInput!) {\n          addPredictionDrafts(input: $input) { ok tournament { __typename\n          ...predictionTournamentFragment } errors { message } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId\n          }",
    },
    AllDynamicConfigs: {
        id: "855e870387cf",
        operation: "query AllDynamicConfigs { dynamicConfigs { values { __typename ... on BoolDynamicConfig {\n          isTrue name } ... on IntDynamicConfig { intVal: value name } ... on FloatDynamicConfig {\n          floatVal: value name } ... on StringDynamicConfig { stringVal: value name } ... on\n          MapDynamicConfig { mapVal: value name } } ok errors { message } } }",
    },
    AllPosts: {
        id: "454651d3d2fa",
        operation: "query AllPosts($sort: PostFeedSort, $range: PostFeedRange, $after:\n          String, $pageSize: Int, $adContext: AdContextInput, $forceAds:\n          ForceAdsInput, $includeSubredditInPosts: Boolean = true , $includeAwards:\n          Boolean = true , $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false ) { postFeed: all { posts(sort:\n          $sort, time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds) { pageInfo { __typename ...pageInfoFragment }\n          dist edges { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on\n          PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    AvatarCatalog: {
        id: "9200f7368db2",
        operation: "query AvatarCatalog($audience: String) { avatarBuilderCatalog(audience:\n          $audience) { userCapabilities categories { id name sections { id name accessoryIds\n          colorPickerCustomizableClass } } closet { accessoryIds maxSlots } runways { id title items\n          { id title imageUrl capabilityRequired accessoryIds } } outfits { __typename id sectionId\n          accessoryIds state capabilityRequired customizableClasses tags title subtitle\n          foregroundImage { url } backgroundImage { url } ...gqlCatalogInventoryItem ... on\n          NFTAvatarOutfit { tokenId contractAddress walletAddress rarity } } accessories {\n          __typename ...avatarAccessoryFragment } pastAvatars { __typename ...avatarFragment } } } \n          fragment gqlCatalogInventoryItem on AvatarOutfit { inventoryItem { id name artist {\n          redditorInfo { __typename id displayName ... on Redditor { profile { title } } } } } } \n          fragment avatarAssetFragment on AvatarAsset { accessoryId imageUrl slot slotNumber } \n          fragment avatarAccessoryFragment on AvatarAccessory { isAvailableForCloset assets {\n          __typename ...avatarAssetFragment } capabilityRequired customizableClasses\n          defaultAccessoryId id sectionId state tags }  fragment avatarFragment on UserAvatar { id\n          accountId accessoryIds backgroundInventoryItem { id } fullImage { url dimensions { width\n          height } } headshotImage { url dimensions { width height } } lastRenderAt lastUpdateAt\n          styles { className fill } tags }",
    },
    BadgeCount: {
        id: "46f3c89ff0cf",
        operation: "query BadgeCount { badgeIndicators { __typename ...badgeIndicatorsFragment } }  fragment\n          badgeIndicatorsFragment on BadgeIndicators { directMessages { count style } chatTab {\n          count style } messageTab { count style } activityTab { count style } inboxTab { count\n          style } appBadge { count style } chatHasNewMessages { style isShowing } }",
    },
    BlockedRedditors: {
        id: "152a67d317d5",
        operation: "query BlockedRedditors($after: String, $pageSize: Int) { identity {\n          blockedRedditorsInfo(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { id } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }",
    },
    BlockedUsers: {
        id: "e02fe8e5969d",
        operation: "query BlockedUsers($after: String, $pageSize: Int) { identity {\n          blockedRedditorsInfo(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename id ... on Redditor { id name icon { url }\n          } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    CancelPrediction: {
        id: "e736232fab55",
        operation: "mutation CancelPrediction($input: CancelPredictionInput!) { cancelPrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }",
    },
    ChangePrediction: {
        id: "70e934edddfc",
        operation: "mutation ChangePrediction($input: ChangePredictionInput!) { changePrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }",
    },
    ChangePredictionVote: {
        id: "6cc2fa5fc684",
        operation: "mutation ChangePredictionVote($input: ChangePredictionVoteInput!) {\n          changePredictionVote(input: $input) { ok poll { __typename ...postPollFragment }\n          errors { message } } }  fragment postPollOptionFragment on PostPollOption { id text\n          voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on PostPoll {\n          options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }",
    },
    ChatTabBadge: {
        id: "7ecf669d1460",
        operation: "query ChatTabBadge { badgeIndicators { __typename ...chatBadgeIndicatorsFragment } } \n          fragment chatBadgeIndicatorsFragment on BadgeIndicators { chatTab { count style }\n          chatHasNewMessages { style isShowing } }",
    },
    CommentsPageAdPost: {
        id: "c751e3294544",
        operation: "query CommentsPageAdPost($id: ID!, $commentsAd: String!, $count: Int!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { children: postInfoById(id: $id) { __typename id ... on SubredditPost {\n          commentsPageAds(count: $count, forceAds: { ad: $commentsAd } , feedContext:\n          $feedContext) { __typename ...postContentFragment ...promotedCommunityPostFragment\n          profile { __typename ...profileFragment } } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment promotedCommunityPostFragment on AdPost {\n          promotedCommunityPost { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }",
    },
    CreateAvatar: {
        id: "c9566e9880ec",
        operation: "mutation CreateAvatar($input: CreateAvatarInput!) { createAvatar(input: $input)\n          { ok errors { message } } }",
    },
    CreateAvatarShare: {
        id: "67e5d8db834d",
        operation: "mutation CreateAvatarShare($input: CreateAvatarInput!) { createAvatar(input:\n          $input) { shareUrl ok errors { message } } }",
    },
    CreateChannelLink: {
        id: "47dba8b7d430",
        operation: "mutation CreateChannelLink($input: CreateChatChannelInviteLinkInput!) {\n          createChatChannelInviteLink(input: $input) { ok inviteUrl } }",
    },
    CreateChatGifMessage: {
        id: "0687013880e7",
        operation: "mutation CreateChatGifMessage($input: CreateChatMessageInput!) {\n          createChatMessage(input: $input) { ok message { channelSendbirdId createdAt\n          customType data isRemoved mentionType message messageId type updatedAt mentionedUsers {\n          name id } user { id name } } } }",
    },
    CreateChatImageMessage: {
        id: "375693994baa",
        operation: "mutation CreateChatImageMessage($input: CreateChatMessageInput!) {\n          createChatMessage(input: $input) { errors { message } ok message { messageId\n          messageRedditId } } }",
    },
    CreateComment: {
        id: "4b697f58218e",
        operation: "mutation CreateComment($input: CreateCommentInput!, $includeAwards: Boolean =\n          true ) { createComment(input: $input) { commentInfo { __typename ... on Comment {\n          __typename ...commentFragment } } ok errors { message } fieldErrors { field message code }\n          } }  fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }\n           fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt isAdminTakedown\n          isRemoved parent { id } postInfo { __typename id title ... on SubredditPost { subreddit {\n          id name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } } isLocked isInitiallyCollapsed initiallyCollapsedReason\n          content { __typename markdown html richtext typeHint ...richtextMediaFragment } authorInfo\n          { __typename ...authorInfoFragment } score voteState authorFlair { __typename\n          ...authorFlairFragment } isSaved isStickied isScoreHidden awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } associatedAward { __typename\n          ...awardFragment } treatmentTags isArchived distinguishedAs permalink moderationInfo {\n          __typename ...modReportsFragment ...userReportsFragment ...modQueueTriggersFragment\n          ...proxyAuthorInfoFragment ... on CommentModerationInfo { isAutoCollapsedFromCrowdControl\n          } verdict verdictAt banReason verdictByRedditorInfo { __typename ...redditorNameFragment }\n          reportCount isRemoved ...lastAuthorModNoteFragment } }",
    },
    CreateCustomEmoji: {
        id: "5b21a5b367d1",
        operation: "mutation CreateCustomEmoji($input: CreateCustomEmojiInput!) {\n          createCustomEmoji(input: $input) { ok emoji { id name emojiIcon { url mimeType x y }\n          stickerIcon { url mimeType x y } } errors { message } } }",
    },
    CreateMediaUploadLease: {
        id: "a8c57a0659ba",
        operation: "mutation CreateMediaUploadLease($input: CreateMediaUploadLeaseInput!) {\n          createMediaUploadLease(input: $input) { mediaId uploadLease { uploadLeaseUrl\n          uploadLeaseHeaders { header value } } } }",
    },
    CreatePredictionTournament: {
        id: "13c7be3872b5",
        operation: "mutation CreatePredictionTournament($input: CreatePredictionTournamentInput!) {\n          createPredictionTournament(input: $input) { ok tournament { __typename\n          ...predictionTournamentFragment } errors { message } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId\n          }",
    },
    CreateProfilePostWithVideo: {
        id: "76402ae44f37",
        operation: "mutation CreateProfilePostWithVideo($input: CreatePostInput!) {\n          createProfilePost(input: $input) { websocketUrl fieldErrors { field message } } }",
    },
    CreateRandomAvatar: {
        id: "b7a024675444",
        operation: "mutation CreateRandomAvatar($input: AvatarRandomGenerationInput!) {\n          createRandomAvatar(input: $input) { imageUrl accessoryIds ok errors { message } }\n          }",
    },
    CreateRecurringScheduledPost: {
        id: "96a30cec9a39",
        operation: "mutation CreateRecurringScheduledPost($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok scheduledPost { __typename\n          ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }",
    },
    CreateScheduledPostLink: {
        id: "02ab047b2370",
        operation: "mutation CreateScheduledPostLink($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok scheduledPost { __typename\n          ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }",
    },
    CreateStandaloneScheduledPost: {
        id: "c5d788128f1e",
        operation: "mutation CreateStandaloneScheduledPost($input: CreateScheduledPostInput!) {\n          createScheduledPost(input: $input) { ok errors { message } scheduledPost {\n          __typename ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }",
    },
    CreateStorefrontOrder: {
        id: "26aa8f546be0",
        operation: "mutation CreateStorefrontOrder($input: CreateStorefrontOrderInput!) {\n          createStorefrontOrder(input: $input) { ok errors { message code } order { id\n          orderedProduct { productId } } } }",
    },
    CreateSubredditPostWithVideo: {
        id: "84fcc92063e6",
        operation: "mutation CreateSubredditPostWithVideo($input: CreateSubredditPostInput!) {\n          createSubredditPost(input: $input) { websocketUrl fieldErrors { field message } }\n          }",
    },
    CreatorStats: {
        id: "2f82c8223eb3",
        operation: "query CreatorStats($postId: ID!) { postStatsById(postId: $postId) { __typename\n          ...PostStatsFragment } postInfoById(id: $postId) { __typename ...PostInfoFragment\n          ... on SubredditPost { otherDiscussions { edges { node { __typename ...PostInfoFragment }\n          } } } ... on ProfilePost { otherDiscussions { edges { node { __typename\n          ...PostInfoFragment } } } } } }  fragment CreatorStatsAvailabilityFragment on\n          CreatorStatsAvailability { availableAt isAvailable }  fragment\n          CreatorStatsTrendDataFragment on CreatorStatsTrendData { at value }  fragment\n          PostStatsFragment on PostStats { id shareAllCountTotals { totalCount availability {\n          __typename ...CreatorStatsAvailabilityFragment } } shareCopyCountTotals { totalCount\n          availability { __typename ...CreatorStatsAvailabilityFragment } } viewCountTotals {\n          totalCount availability { __typename ...CreatorStatsAvailabilityFragment } }\n          viewCountTrends { availability { __typename ...CreatorStatsAvailabilityFragment } data {\n          __typename ...CreatorStatsTrendDataFragment } } }  fragment PostInfoFragment on PostInfo {\n          __typename id title isNsfw permalink crosspostCount ... on SubredditPost { content { html\n          markdown } thumbnail { url } subreddit { id prefixedName styles { icon } } } ... on\n          ProfilePost { content { html markdown } thumbnail { url } authorInfo { __typename ... on\n          Redditor { id prefixedName icon { url } snoovatarIcon { url } } } } }",
    },
    DeleteChatMessage: {
        id: "16e1803b7e06",
        operation: "mutation DeleteChatMessage($input: DeleteChatMessageInput!) {\n          deleteChatMessage(input: $input) { ok } }",
    },
    DeleteComment: {
        id: "2f933af7b7ee",
        operation: "mutation DeleteComment($input: DeleteCommentInput!) { deleteComment(input:\n          $input) { ok errors { message } } }",
    },
    DeleteCustomEmoji: {
        id: "63e2db7222c0",
        operation: "mutation DeleteCustomEmoji($input: DeleteCustomEmojiInput!) {\n          deleteCustomEmoji(input: $input) { ok errors { message } } }",
    },
    DeleteInboxNotifications: {
        id: "b2accab68d30",
        operation: "mutation DeleteInboxNotifications($input: DeleteInboxNotificationsInput!) {\n          deleteInboxNotifications(input: $input) { ok errors { message } } }",
    },
    DeletePost: {
        id: "273bffbed898",
        operation: "mutation DeletePost($input: DeletePostInput!) { deletePost(input: $input) { ok\n          } }",
    },
    DeleteScheduledPost: {
        id: "7e8a24552ee8",
        operation: "mutation DeleteScheduledPost($input: DeleteScheduledPostInput!) {\n          deleteScheduledPost(input: $input) { ok errors { message } } }",
    },
    DeleteSocialLinks: {
        id: "62b9b3e55ebc",
        operation: "mutation DeleteSocialLinks($input: DeleteSocialLinksInput!) {\n          deleteSocialLinks(input: $input) { ok errors { message } socialLinks { __typename\n          ...socialLinkFragment } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }",
    },
    DestroyInviteLink: {
        id: "593af6696289",
        operation: "mutation DestroyInviteLink($input: DestroyChatChannelInviteLinksInput!) {\n          destroyChatChannelInviteLinks(input: $input) { ok } }",
    },
    DiscoverFeedElements: {
        id: "3e7af302c192",
        operation: "query DiscoverFeedElements($before: String, $after: String, $pageSize:\n          Int, $last: Int, $topicSlug: String, $includeTopics: Boolean!,\n          $includeRecommendation: Boolean!, $includeSubscribedSubreddits: Boolean!,\n          $includeSubredditInPosts: Boolean = true , $subscribedSubredditsCount: Int =\n          100 , $seed: DiscoverFeedSeedInput, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity @include(if:\n          $includeSubscribedSubreddits) { subscribedSubreddits(first:\n          $subscribedSubredditsCount) { edges { node { __typename ...subredditFragment } } } }\n          discover { discoverElements(before: $before, after: $after, first:\n          $pageSize, last: $last, topicSlug: $topicSlug, seed: $seed) {\n          topics @include(if: $includeTopics) { name slug } elements { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ... on DiscoverPost { __typename\n          ...discoverPostFragment } ... on RecommendationCarouselElement @include(if:\n          $includeRecommendation) { id title description { richtext } link type\n          recommendations { __typename ...discoverPostFragment } }\n          ...discoverRelatedCommunitiesFragment } } } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditFragment on Subreddit {\n          id name prefixedName isQuarantined title type subscribersCount isNsfw isSubscribed\n          isThumbnailsEnabled isFavorite path styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } primaryColor bannerBackgroundImage legacyBannerBackgroundImage\n          legacyPrimaryColor } modPermissions { isAccessEnabled } isTitleSafe isUserBanned\n          isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment imageAssetFragment on\n          ImageAsset { __typename id status mimetype width height url small: preview(maxWidth: 108)\n          { __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          discoverPostFragment on DiscoverPost { id topic { name slug } postInfo { __typename\n          ...postFragment } }  fragment discoverRelatedCommunitiesFragment on\n          CommunityRecommendationsElement { id modelVersion communityRecommendations { __typename\n          ... on CommunityRecommendation { id usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }",
    },
    DownloadAvatar: {
        id: "d6a3201f7a51",
        operation: "mutation DownloadAvatar($input: AvatarDownloadInput!) { downloadAvatar(input:\n          $input) { ok imageUrl errors { message } } }",
    },
    DownvotedPosts: {
        id: "2e8ad3917648",
        operation: "query DownvotedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { downvotedPosts(after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges\n          { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    EndPredictionTournament: {
        id: "67cb65eb8831",
        operation: "mutation EndPredictionTournament($input: EndPredictionTournamentInput!) {\n          endPredictionTournament(input: $input) { ok errors { message } tournament {\n          __typename ...predictionTournamentFragment } } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }",
    },
    ExposeExperiments: {
        id: "aa0989f76ae4",
        operation: "mutation ExposeExperiments($inputs: [ExposeVariantInput!]!) {\n          exposeExperimentBatch(inputs: $inputs) { payloads { ok } } }",
    },
    FetchActiveCoinSale: {
        id: "af65634a3067",
        operation: "query FetchActiveCoinSale { coinSale { endsAt heroText heroSubtext mobileHeroImageUrl }\n          }",
    },
    FindDirectRoom: {
        id: "70390f538de4",
        operation: "query FindDirectRoom($chatSystem: ChatSystem!, $userKindWithId: ID!) {\n          directChatRoom(chatSystem: $chatSystem, interlocutorId: $userKindWithId) { id\n          replicationInfo { status correspondingRoomId } } }",
    },
    FollowedByRedditors: {
        id: "43ed2a42fc25",
        operation: "query FollowedByRedditors($limit: Int, $from: String, $searchQuery:\n          String) { identity { followedByRedditorsInfo(first: $limit, after: $from,\n          searchQuery: $searchQuery) { edges { node { __typename ...redditorFragment ... on\n          Redditor { displayName isFollowed karma { total } isAcceptingFollowers } } } pageInfo {\n          endCursor } } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth:\n          24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }",
    },
    GenerateCustomEmojiUploadLease: {
        id: "62c085401bc1",
        operation: "mutation GenerateCustomEmojiUploadLease($input: GenerateCustomEmojiLeaseInput!) {\n          generateCustomEmojiUploadLease(input: $input) { ok s3UploadLease { action fields {\n          name value } } errors { message } } }",
    },
    GeoContributableSubreddits: {
        id: "1ddd8cf83621",
        operation: "query GeoContributableSubreddits($after: String, $pageSize: Int) {\n          geoContributableSubreddits(after: $after, first: $pageSize) { pageInfo {\n          __typename ...pageInfoFragment } edges { node { __typename ...subredditFragment\n          publicDescriptionText geoPlace { id name source } modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditFragment on Subreddit {\n          id name prefixedName isQuarantined title type subscribersCount isNsfw isSubscribed\n          isThumbnailsEnabled isFavorite path styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } primaryColor bannerBackgroundImage legacyBannerBackgroundImage\n          legacyPrimaryColor } modPermissions { isAccessEnabled } isTitleSafe isUserBanned\n          isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled }",
    },
    GetAchievementFlairsStatus: {
        id: "035e6deb315a",
        operation: "query GetAchievementFlairsStatus($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { achievementFlairsStatus { isEnabled\n          } } } }",
    },
    GetAllExperimentVariants: {
        id: "9b1acf5d6dbb",
        operation: "query GetAllExperimentVariants { experimentVariants { id name experimentName version } }",
    },
    GetChatMessageReactionIcons: {
        id: "b33e99cfbf02",
        operation: "query GetChatMessageReactionIcons($query: String!, $first: Int) {\n          searchChatMessageReactionIcons(query: $query, first: $first) { edges { node {\n          url key altText } } } }",
    },
    GetCommentById: {
        id: "1919d4cf49e2",
        operation: "query GetCommentById($id: ID!, $includeAwards: Boolean = true ) {\n          commentById(id: $id) { __typename ...commentFragment } }  fragment\n          redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name prefixedName }\n          ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt isAdminTakedown\n          isRemoved parent { id } postInfo { __typename id title ... on SubredditPost { subreddit {\n          id name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } } isLocked isInitiallyCollapsed initiallyCollapsedReason\n          content { __typename markdown html richtext typeHint ...richtextMediaFragment } authorInfo\n          { __typename ...authorInfoFragment } score voteState authorFlair { __typename\n          ...authorFlairFragment } isSaved isStickied isScoreHidden awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } associatedAward { __typename\n          ...awardFragment } treatmentTags isArchived distinguishedAs permalink moderationInfo {\n          __typename ...modReportsFragment ...userReportsFragment ...modQueueTriggersFragment\n          ...proxyAuthorInfoFragment ... on CommentModerationInfo { isAutoCollapsedFromCrowdControl\n          } verdict verdictAt banReason verdictByRedditorInfo { __typename ...redditorNameFragment }\n          reportCount isRemoved ...lastAuthorModNoteFragment } }",
    },
    GetCommentByIdWithChildren: {
        id: "2e1690a39199",
        operation: "query GetCommentByIdWithChildren($id: ID!, $sortType: CommentSort,\n          $after: String, $maxDepth: Int, $count: Int, $includeAwards:\n          Boolean = true ) { commentById(id: $id) { postInfo { __typename\n          ...pdsBasicPostInfoFragment } children(after: $after, count: $count, depth:\n          $maxDepth, sort: $sortType) { __typename ...commentForestTreesFragment } } } \n          fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }\n           fragment pdsBasicPostInfoFragment on PostInfo { __typename id ... on SubredditPost {\n          subreddit { id name prefixedName } } ... on ProfilePost { profile { redditorInfo {\n          __typename ...redditorNameFragment } } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt isAdminTakedown\n          isRemoved parent { id } postInfo { __typename id title ... on SubredditPost { subreddit {\n          id name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } } isLocked isInitiallyCollapsed initiallyCollapsedReason\n          content { __typename markdown html richtext typeHint ...richtextMediaFragment } authorInfo\n          { __typename ...authorInfoFragment } score voteState authorFlair { __typename\n          ...authorFlairFragment } isSaved isStickied isScoreHidden awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } associatedAward { __typename\n          ...awardFragment } treatmentTags isArchived distinguishedAs permalink moderationInfo {\n          __typename ...modReportsFragment ...userReportsFragment ...modQueueTriggersFragment\n          ...proxyAuthorInfoFragment ... on CommentModerationInfo { isAutoCollapsedFromCrowdControl\n          } verdict verdictAt banReason verdictByRedditorInfo { __typename ...redditorNameFragment }\n          reportCount isRemoved ...lastAuthorModNoteFragment } }  fragment deletedCommentFragment on\n          DeletedComment { isInitiallyCollapsed moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount\n          ...lastAuthorModNoteFragment } }  fragment commentForestTreesFragment on CommentForest {\n          trees { depth more { count cursor isTooDeepForCount } parentId node { __typename\n          ...commentFragment ...deletedCommentFragment } childCount } }",
    },
    GetCustomEmojis: {
        id: "f40f533cbd0e",
        operation: "query GetCustomEmojis($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { id name customEmojis { mediaPacks {\n          id name emotes { name emojiIcon { url mimeType x y } stickerIcon { url mimeType x y } } }\n          } } } }",
    },
    GetCustomEmojisStatus: {
        id: "7d204cf36d95",
        operation: "query GetCustomEmojisStatus($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { customEmojisStatus { isEnabled } } }\n          }",
    },
    GetInboxNotificationFeed: {
        id: "015e7d032087",
        operation: "query GetInboxNotificationFeed($pageSize: Int!, $after: String,\n          $subredditIconMaxWidth: MaxWidthValue!) { notificationInbox { elements(first:\n          $pageSize, after: $after) { pageInfo { endCursor hasNextPage } edges { cursor\n          node { __typename id ...inboxBannerNotificationFragment ... on InboxNotification { title\n          body deeplinkUrl icon sentAt readAt viewedAt avatar { url isNsfw } isHideNotifEligible\n          isToggleMessageTypeEligible isToggleNotificationUpdateEligible\n          isToggleUpdateFromSubredditEligible isToggleLowUpdateFromSubredditEligible context {\n          __typename messageType ... on PostInboxNotificationContext { post { __typename\n          ...inboxFeedPostInfoFragment } isBodyHidden isPostHidden } ... on\n          PostSubredditInboxNotificationContext { post { __typename ...inboxFeedPostInfoFragment }\n          subreddit { id } isBodyHidden isPostHidden } ... on CommentInboxNotificationContext {\n          comment { parent { id } } } ... on SubredditInboxNotificationContext { subreddit { id } }\n          ... on AwardReceivedInboxNotificationContext { awarding { id award { id } awarderInfo {\n          __typename id ... on Redditor { isAcceptingChats } } target { __typename ... on PostInfo {\n          permalink title } ... on Comment { permalink } } } } } } } } } } }  fragment\n          inboxBannerNotificationFragment on InboxBannerNotification { applicablePlatforms {\n          platform minimumVersion } bodyText { text colorHex } bodyBackgroundImage linkUrl\n          notificationName persistence { isDismissible maxViews } primaryCta { actionType colors {\n          activeHex backgroundHex borderHex hoverHex } text { text colorHex } url } secondaryCta {\n          actionType colors { activeHex backgroundHex borderHex hoverHex } text { text colorHex }\n          url } thumbnailImageUrl titleImage titleText { text colorHex } }  fragment\n          inboxFeedPostInfoFragment on PostInfo { __typename id title score commentCount isNsfw\n          isSpoiler removedByCategory ... on Post { thumbnail { url } media { obfuscated {\n          content(maxWidth: $subredditIconMaxWidth) { url } } } } }",
    },
    GetInboxNotificationFeedForReceiveEvents: {
        id: "377b63f2930c",
        operation: "query GetInboxNotificationFeedForReceiveEvents($pageSize: Int!, $after: String)\n          { notificationInbox { elements(first: $pageSize, after: $after) { edges { node\n          { __typename id ... on InboxNotification { context { __typename messageType ... on\n          AwardReceivedInboxNotificationContext { awarding { award { id } } } } readAt viewedAt } }\n          } } } }",
    },
    GetInventoryItemsByIds: {
        id: "1741dee3c84b",
        operation: "query GetInventoryItemsByIds($ids: [ID!]) { inventoryItems(filter: { ids: $ids\n          } ) { edges { node { __typename ...inventoryItemFragment } } } }  fragment\n          inventoryItemFragment on InventoryItem { id name tags serialNumber owner { id displayName\n          } artist { redditorInfo { __typename id displayName ... on Redditor { prefixedName icon {\n          url } snoovatarIcon { url } profile { title publicDescriptionText } } } } benefits {\n          avatarOutfit { id preRenderImage { url } backgroundImage { url } } } drop { size rarity }\n          nft { contractAddress title description externalUrls series mintedAt tokenUrl tokenId\n          imageUrl wallet { address } } }",
    },
    GetLinkTitle: {
        id: "57e15486b3f3",
        operation: "query GetLinkTitle($url: URL!) { urlMetadata(url: $url) { title } }",
    },
    GetMatrixChatUsersByIds: {
        id: "642729a05463",
        operation: "query GetMatrixChatUsersByIds($userKindWithIds: [ID!]!) { redditorsInfoByIds(ids:\n          $userKindWithIds) { __typename id ... on Redditor { name icon { url } snoovatarIcon\n          { url } profile { isNsfw } karma { total } cakeDayOn isBlocked isAcceptingChats } ... on\n          UnavailableRedditor { name } ... on DeletedRedditor { name } } }",
    },
    GetModPnSettingsLayout: {
        id: "5ec8e51a973a",
        operation: "query GetModPnSettingsLayout($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { modPnSettingsLayout { id page {\n          __typename ...modPnSettingsRowFragment sections { __typename\n          ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment ... on\n          ModPnSettingsLayoutRowPage { sections { __typename ...modPnSettingSectionFragment rows {\n          __typename ...modPnSettingsRowFragment ... on ModPnSettingsLayoutRowPage { sections {\n          __typename ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment\n          ... on ModPnSettingsLayoutRowPage { sections { __typename ...modPnSettingSectionFragment\n          rows { __typename ...modPnSettingsRowFragment ... on ModPnSettingsLayoutRowPage { sections\n          { __typename ...modPnSettingSectionFragment rows { __typename ...modPnSettingsRowFragment\n          } } } } } } } } } } } } } } } } } } }  fragment modPnSettingsRowFragment on\n          ModPnSettingsLayoutRow { __typename ... on ModPnSettingsLayoutRowRange { id title\n          description icon ranges rangeTitle rangeSubtitle currentRange isAuto thresholdName } ...\n          on ModPnSettingsLayoutRowToggle { id title description icon isEnabled isAuto statusName }\n          ... on ModPnSettingsLayoutRowSectionToggle { id title description icon isEnabled isAuto\n          statusName } ... on ModPnSettingsLayoutRowPage { id title description icon displayValue }\n          }  fragment modPnSettingSectionFragment on ModPnSettingsLayoutSection { id title }",
    },
    GetMuxedMP4: {
        id: "2076e062c891",
        operation: "query GetMuxedMP4($linkId: String!) { packagedVideoUrlByLinkId(format: MUXED_MP4,\n          linkId: $linkId) { url } }",
    },
    GetPostRequirements: {
        id: "a755df340816",
        operation: "query GetPostRequirements($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { postRequirements(id:\n          $subredditId) { __typename ...postRequirementsFragment } } } }  fragment\n          postRequirementsFragment on PostRequirements { bodyBlacklistedStrings bodyRegexes\n          bodyRequiredStrings bodyRestrictionPolicy domainBlacklist domainWhitelist\n          galleryCaptionsRequirement galleryMaxItems galleryMinItems galleryUrlsRequirement\n          guidelinesText isFlairRequired linkRepostAge linkRestrictionPolicy titleBlacklistedStrings\n          titleRegexes titleRequiredStrings titleTextMaxLength titleTextMinLength }",
    },
    GetPredictionChipPackages: {
        id: "b4dbae0aed2c",
        operation: "query GetPredictionChipPackages($postId: ID!) { postInfoById(id: $postId) {\n          __typename ... on Post { predictionChipPackages { id name amount currency } } } }",
    },
    GetPredictionTokens: {
        id: "8bbd8c3b86b6",
        operation: "query GetPredictionTokens($tournamentId: ID!) { identity {\n          predictionTokens(tournamentId: $tournamentId) } }",
    },
    GetPredictionTournaments: {
        id: "b1e9eb98e8a8",
        operation: "query GetPredictionTournaments($subredditName: String!, $isLatestOnly:\n          Boolean!, $tournamentId: String, $isIncludingPredictions: Boolean!,\n          $isIncludingCancelledPredictions: Boolean!, $includeSubredditInPosts: Boolean\n          = true , $isIncludingParticipants: Boolean = false , $includeAwards: Boolean =\n          true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false ) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { styles { icon primaryColor }\n          predictionTournaments(isLatestOnly: $isLatestOnly, tournamentId:\n          $tournamentId, isIncludingPredictions: $isIncludingPredictions,\n          isIncludingParticipants: $isIncludingParticipants, isIncludingCancelledPredictions:\n          $isIncludingCancelledPredictions) { __typename ...predictionTournamentFragment\n          totalParticipantsCount latestParticipants { __typename ...redditorFragment }\n          predictionPosts { __typename ...postFragment } } } } }  fragment\n          predictionTournamentFragment on PredictionTournament { tournamentId name status themeId } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth: 72) { __typename\n          ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment }\n          icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment } icon_144:\n          icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionOptionFragment on\n          PredictionOption { id text voteCount totalStakeAmount redditorStakeAmount }  fragment\n          predictionFragment on Prediction { id status title isNsfw isSpoiler options { __typename\n          ...predictionOptionFragment } createdAt endsAt selectedOptionId totalVoteCount\n          totalStakeAmount wonAmount resolvedOptionId voteUpdatesRemained }  fragment\n          predictionTournamentPostFragment on PredictionTournament { __typename\n          ...predictionTournamentFragment predictions { __typename ...predictionFragment } } \n          fragment audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    GetStorefrontAvatarBuilderCatalog: {
        id: "ca55449a5997",
        operation: "query GetStorefrontAvatarBuilderCatalog { avatarBuilderCatalog { outfits { id acquiredAt\n          state inventoryItem { id } } } }",
    },
    GetStorefrontListingItemById: {
        id: "3290fe638197",
        operation: "query GetStorefrontListingItemById($ids: [ID!]) { avatarStorefront { listings(filter:\n          { ids: $ids } ) { edges { node { id totalQuantity item { __typename\n          ...inventoryItemFragment } productOffer { pricePackages { id price currency quantity\n          externalProductId requiredPaymentProviders } } status } } } } }  fragment\n          inventoryItemFragment on InventoryItem { id name tags serialNumber owner { id displayName\n          } artist { redditorInfo { __typename id displayName ... on Redditor { prefixedName icon {\n          url } snoovatarIcon { url } profile { title publicDescriptionText } } } } benefits {\n          avatarOutfit { id preRenderImage { url } backgroundImage { url } } } drop { size rarity }\n          nft { contractAddress title description externalUrls series mintedAt tokenUrl tokenId\n          imageUrl wallet { address } } }",
    },
    GetSubredditAchievementFlairs: {
        id: "39e3a4ecfe19",
        operation: "query GetSubredditAchievementFlairs($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          subredditAchievementFlairs { __typename ...subredditAchievementFlair } } } }  fragment\n          subredditMediaIcon on SubredditMediaIcon { url mimeType }  fragment\n          subredditAchievementFlair on SubredditAchievementFlair { name type category description\n          icon { __typename ...subredditMediaIcon } }",
    },
    GetSubredditChannels: {
        id: "180e17d4bc30",
        operation: "query GetSubredditChannels($subredditName: String!, $after: String,\n          $pageSize: Int, $includePostChannels: Boolean = false ) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          channels(after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ... on SubredditChatChannel { id icon\n          description name isRestricted permalink roomId } ... on SubredditPostChannel @include(if:\n          $includePostChannels) { id icon description name isRestricted permalink } } } } } }\n          }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    GetSubredditExperiment: {
        id: "ab4e401bc567",
        operation: "query GetSubredditExperiment($pageType: ExperimentPageType!, $subredditName:\n          String!, $experimentName: String!) { pageExperimentVariant(pageType:\n          $pageType, subredditName: $subredditName, name: $experimentName) {\n          canonicalUrl experiment { id name experimentName version } } }",
    },
    GetSubredditGeoPlaceBySubredditId: {
        id: "267390ee5f6d",
        operation: "query GetSubredditGeoPlaceBySubredditId($id: ID!) { subredditInfoById(id: $id)\n          { __typename ... on Subreddit { geoPlace { id name source } } } }",
    },
    GetTopKarmaSubreddits: {
        id: "eb995321f577",
        operation: "query GetTopKarmaSubreddits($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { activeSubreddits { id name prefixedName\n          isNsfw subscribersCount isSubscribed karma { fromComments fromPosts } styles {\n          mobileBannerImage bannerBackgroundImage icon primaryColor legacyPrimaryColor } } icon {\n          url } } } }",
    },
    GetTopicsRecommendation: {
        id: "0188f636c273",
        operation: "query GetTopicsRecommendation($linkId: String, $onboardingFlow: OnboardingFlow)\n          { interestTopicRecommendationsByLinkId(linkId: $linkId, onboardingFlow:\n          $onboardingFlow) { __typename ...interestTopicRecommendationsFragment } }  fragment\n          interestTopicRecommendationsFragment on InterestTopicRecommendations {\n          recommendationTopics { edges { node { id topic { title name } } } } }",
    },
    GetTrendingChatGifs: {
        id: "d24b7f018412",
        operation: "query GetTrendingChatGifs($first: Int, $after: String) {\n          trendingChatGifs(first: $first, after: $after) { version provider pageInfo {\n          hasNextPage endCursor } edges { node { id title downsized: source(size: DOWNSIZED) {\n          __typename ...mediaSourceFragment } fixed_height: source(size: FIXED_HEIGHT) { __typename\n          ...mediaSourceFragment } fixed_width: source(size: FIXED_WIDTH) { __typename\n          ...mediaSourceFragment } } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }",
    },
    GetUserAchievementFlairs: {
        id: "b4d7e3c1695a",
        operation: "query GetUserAchievementFlairs($subredditNames: [String!]!, $redditorIds:\n          [ID!]!) { subredditsInfoByNames(names: $subredditNames) { __typename ... on\n          Subreddit { id name userAchievementFlairsByRedditorIds(ids: $redditorIds) {\n          redditorId userAchievementFlairs { __typename ...userAchievementFlair } isHidden } } } } \n          fragment subredditMediaIcon on SubredditMediaIcon { url mimeType }  fragment\n          userAchievementFlair on UserAchievementFlair { name type category icon { __typename\n          ...subredditMediaIcon } isPreferred }",
    },
    GetWelcomeMessageForSubreddit: {
        id: "7e371b12c7b9",
        operation: "query GetWelcomeMessageForSubreddit($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { __typename ...welcomeMessageFragment }\n          } }  fragment welcomeMessageFragment on Subreddit { welcomeMessage { body { markdown\n          richtext } buttonCtaText isEnabled isRenderedOnJoin } }",
    },
    HandleGoogleBilling: {
        id: "c26d262f7cb5",
        operation: "mutation HandleGoogleBilling($input: GoogleBillingEventInput!) {\n          handleGoogleBillingEvent(input: $input) { ok errors { message code errorInputArgs {\n          variableName value } } isFallbackRequired } }",
    },
    HiddenPosts: {
        id: "99fabfcf3499",
        operation: "query HiddenPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { hiddenPosts(after: $after,\n          first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    HomeElements: {
        id: "769ee26e130d",
        operation: "query HomeElements($interestTopicIds: [ID!], $servingId: ID,\n          $positiveSignalSubredditIds: [ID!], $sort: PostFeedSort, $range:\n          PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $includeExposureEvents: Boolean =\n          false , $crossPlatformContext: CrossPlatformContextInput,\n          $includeAnnouncements: Boolean = false , $includeSubredditInPosts: Boolean =\n          true , $includeTopicRecommendations: Boolean = false , $includeAwards: Boolean\n          = true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false , $variant: String,\n          $loggedOutAllowNsfw: Boolean, $experienceInputs: [UxTargetingExperience!]!,\n          $advancedConfiguration: UxTargetingAdvancedConfigurationInput!) {\n          featuredAnnouncements @include(if: $includeAnnouncements) { __typename\n          ...featuredAnnouncementFragment } postFeed: home { elements(feedRankingContext: {\n          interestTopicIds: $interestTopicIds servingId: $servingId\n          positiveSignalSubredditIds: $positiveSignalSubredditIds variant: $variant\n          loggedOutAllowNsfw: $loggedOutAllowNsfw } , sort: $sort, time: $range,\n          after: $after, first: $pageSize, adContext: $adContext, forceAds:\n          $forceAds, includeExposureEvents: $includeExposureEvents,\n          crossPlatformContext: $crossPlatformContext, uxTargetingContext: { experienceInputs:\n          $experienceInputs advancedConfiguration: $advancedConfiguration } ) { pageInfo\n          { __typename ...pageInfoFragment } dist edges { node { __typename ...postFragment\n          ...postRecommendationFragment ...feedAnswerableQuestionsFragment\n          ...topicRecommendationsFeedElementFragment @include(if:\n          $includeTopicRecommendations) ...nftBannerFeedFragment ...merchandisingUnitFragment\n          } } } } }  fragment featuredAnnouncementFragment on Announcement { id title description\n          url iconUrl maxImpressionsCount experimentName }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }  fragment answerableQuestionAnalyticsDataFragment on Subreddit { modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } id name\n          publicDescriptionText isNsfw type originalContentCategories isQuarantined whitelistStatus\n          isSubscribed isFavorite karma { fromComments fromPosts } }  fragment\n          answerableQuestionsFragment on Subreddit { __typename answerableQuestions { id type\n          questionText answerOptions { id text } } ...answerableQuestionAnalyticsDataFragment } \n          fragment feedAnswerableQuestionsFragment on SubredditPost { subreddit { __typename\n          ...answerableQuestionsFragment } }  fragment interestTopicRecommendationsFragment on\n          InterestTopicRecommendations { recommendationTopics { edges { node { id topic { title name\n          } } } } }  fragment topicRecommendationsFeedElementFragment on\n          InterestTopicRecommendationsFeedElement { id topicRecommendations: recommendations {\n          __typename ...interestTopicRecommendationsFragment } }  fragment nftBannerFeedFragment on\n          FreeNftFeedElement { id description buttonCtaText nftTitle: title }  fragment\n          merchandisingUnitFragment on MerchandisingUnit { body cta format id images { __typename\n          ...mediaAssetFragment } title url video { __typename ...mediaAssetFragment } }",
    },
    InterestTopics: {
        id: "bcd8f463ee1a",
        operation: "query InterestTopics($schemeName: String!, $maxDepth: Int!, $first: Int!,\n          $maxChildren: Int!, $overrideSchemeName: String, $onboardingFlow:\n          OnboardingFlow) { interestTopics(schemeName: $schemeName, maxDepth: $maxDepth,\n          first: $first, maxChildren: $maxChildren, overrideSchemeName:\n          $overrideSchemeName, onboardingFlow: $onboardingFlow) { pageInfo { __typename\n          ...pageInfoFragment } schemeName edges { cursor node { id topic { name title parents {\n          nodeId } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    InterestTopicsByIds: {
        id: "9ec12eb4ad74",
        operation: "query InterestTopicsByIds($schemeName: String!, $maxSubreddits: Int!,\n          $topicIds: [ID!]!, $onboardingFlow: OnboardingFlow) {\n          interestTopicsByIds(schemeName: $schemeName, maxSubreddits: $maxSubreddits,\n          topicIds: $topicIds, onboardingFlow: $onboardingFlow) { edges { node { id\n          topic { title name subreddits { edges { node { prefixedName id publicDescriptionText\n          subscribersCount detectedLanguage styles { primaryColor legacyPrimaryColor icon legacyIcon\n          { url } } } } } } } } } }",
    },
    IsPredictionCreationAllowed: {
        id: "1dda6468ff2e",
        operation: "query IsPredictionCreationAllowed($subredditId: ID!) { identity {\n          isPredictionCreationAllowed(subredditId: $subredditId) } }",
    },
    IsUsernameAvailable: {
        id: "7e00df9289f2",
        operation: "query IsUsernameAvailable($name: String!) { isUsernameAvailable(name: $name)\n          }",
    },
    JoinChatChannelWithInviteLink: {
        id: "f07a0441b6fd",
        operation: "mutation JoinChatChannelWithInviteLink($input: JoinChatChannelWithInviteLinkInput!) {\n          joinChatChannelWithInviteLink(input: $input) { channelSendbirdId errors { message }\n          } }",
    },
    ModQueueItemsWithSort: {
        id: "a316a4791d76",
        operation: "query ModQueueItemsWithSort($subredditIds: [ID!], $queueType: ModQueueType!,\n          $sortType: ModQueueSort, $itemTypes: [ModQueueItemType!], $after:\n          String, $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean =\n          true , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean =\n          false , $includePostStats: Boolean = false ) { modQueueItems(subredditIds:\n          $subredditIds, queueType: $queueType, sort: $sortType, itemTypes:\n          $itemTypes, after: $after) { pageInfo { __typename ...fullPageInfoFragment }\n          edges { node { __typename subredditInfo { __typename ...subredditFragment } ... on\n          ModQueueItemPost { postInfo { __typename ...postFragment } } ... on ModQueueItemComment {\n          commentInfo { __typename ...commentFragment } } ... on ModQueueItemChatComment {\n          commentInfo { __typename ...commentFragment } } } cursor } } }  fragment\n          fullPageInfoFragment on PageInfo { hasNextPage hasPreviousPage startCursor endCursor } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }  fragment\n          commentFragment on Comment { id createdAt editedAt isAdminTakedown isRemoved parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }",
    },
    ModQueueNewItemCount: {
        id: "49ebd4b32370",
        operation: "query ModQueueNewItemCount($lastseen: String) { modQueueCount(queueType: MOD, before:\n          $lastseen) { count } }",
    },
    ModRecommendedSubreddits: {
        id: "eac74c9e3404",
        operation: "query ModRecommendedSubreddits($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { widgets { orderedSidebarWidgets {\n          __typename ... on CommunityListWidget { id shortName communities { id name isSubscribed\n          styles { icon primaryColor } } } } } } } }",
    },
    MultiredditByPath: {
        id: "d6fc692a866e",
        operation: "query MultiredditByPath($path: String, $withSubreddits: Boolean = false ) {\n          multireddit(path: $path) { __typename ...customFeedMultiredditFragment } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }",
    },
    MultiredditPosts: {
        id: "764fc17a722c",
        operation: "query MultiredditPosts($multiredditPath: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $includeSubredditInPosts: Boolean =\n          true , $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { postFeed: multireddit(path: $multiredditPath) { posts(sort: $sort, time:\n          $range, after: $after, first: $pageSize, adContext: $adContext,\n          forceAds: $forceAds) { pageInfo { __typename ...pageInfoFragment } dist edges { node\n          { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    MyAuthoredMultireddits: {
        id: "634684da445a",
        operation: "query MyAuthoredMultireddits($withSubreddits: Boolean = false , $after: String)\n          { identity { authoredMultireddits(after: $after) { edges { node { __typename\n          ...customFeedMultiredditFragment } } pageInfo { __typename ...pageInfoFragment } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    MyMultireddits: {
        id: "ec7fd7913631",
        operation: "query MyMultireddits($withSubreddits: Boolean = false , $after: String) {\n          identity { allMultireddits(after: $after) { edges { node { __typename\n          ...customFeedMultiredditFragment } } pageInfo { __typename ...pageInfoFragment } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          profileFragment on Profile { redditorInfo { __typename ... on Redditor { id name\n          prefixedName accountType } } id title description { markdown } subscribersCount isNsfw\n          isSubscribed isModeratable modPermissions { isAccessEnabled } whitelistStatus\n          isDefaultIcon name isQuarantined styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } legacyPrimaryColor } }  fragment customFeedMultiredditFragment on\n          Multireddit { name displayName descriptionContent { richtext } ownerInfo { __typename id\n          ... on Redditor { name } ... on UnavailableRedditor { name } } subredditCount visibility\n          path icon isFollowed isNsfw subreddits(first: 100) @include(if: $withSubreddits) {\n          edges { node { id name prefixedName subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } profiles(first: 100) @include(if:\n          $withSubreddits) { edges { node { __typename ...profileFragment } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    NearbySubreddits: {
        id: "b9b34e06dc47",
        operation: "query NearbySubreddits($first: Int!) { nearbySubreddits(first: $first) { edges\n          { node { prefixedName id publicDescriptionText subscribersCount styles { primaryColor\n          legacyPrimaryColor icon legacyIcon { url } } } } } }",
    },
    NewsFeed: {
        id: "45a5087514ad",
        operation: "query NewsFeed($sort: PostFeedSort, $range: PostFeedRange, $after:\n          String, $pageSize: Int, $adContext: AdContextInput, $forceAds:\n          ForceAdsInput, $includeSubredditInPosts: Boolean = true , $includeAwards:\n          Boolean = true , $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false ) { news { elements(sort:\n          $sort, time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds) { __typename dist\n          ...feedElementConnectionFragment edges { node { __typename ...subredditDetailFragment ...\n          on NewsFeedTopicsElement { topics { id displayName iconUrl subtopics { id displayName\n          subredditIds } } } } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }  fragment feedElementConnectionFragment on FeedElementConnection { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...postFragment\n          ...postRecommendationFragment } } }  fragment subredditDetailFragment on Post { __typename\n          ... on SubredditPost { subreddit { __typename ...subredditFragment } } ... on ProfilePost\n          { profile { __typename ...profileFragment } } ... on AdPost { profile { __typename\n          ...profileFragment } } crosspostRoot { post { __typename ... on SubredditPost { subreddit\n          { __typename ...subredditFragment } } ... on ProfilePost { profile { __typename\n          ...profileFragment } } ... on AdPost { profile { __typename ...profileFragment } } } }\n          }",
    },
    OnboardingPracticeFeed: {
        id: "0d81d627c7ef",
        operation: "query OnboardingPracticeFeed($interestTopicIds: [ID!], $first: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { onboardingPracticeFeed {\n          elements(onboardingFeedContext: { interestTopicIds: $interestTopicIds } , first:\n          $first) { edges { node { __typename ...postRecommendationFragment } } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          postRecommendationFragment on PostRecommendation { recommendationContext { __typename\n          content { richtext html } isContextHidden typeIdentifier ... on\n          InterestTopicRecommendationContext { interestTopicNode { id } } ... on\n          SimilarSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          } } } ... on TimeOnSubredditRecommendationContext { subreddit { __typename id ... on\n          Subreddit { name } } } ... on OnboardingPracticeFeedRecommendationContext {\n          interestTopicNode { id topic { name title } } } } postInfo { __typename ...postFragment }\n          }",
    },
    PersonalizedYearInReview: {
        id: "43da8db3763b",
        operation: "query PersonalizedYearInReview { personalizedYearInReview { cards { __typename title\n          subtitle contentType ...genericCardFragment ...introCardFragment ...singleStatCardFragment\n          ...postCardFragment ...commentCardFragment ...subredditCardFragment\n          ...subredditListSingleStatCardFragment ...subredditListCardFragment ...shareCardFragment\n          ...endCardFragment } } }  fragment genericCardFragment on\n          PersonalizedYearInReviewGenericCard { templateImageUrl }  fragment introCardFragment on\n          PersonalizedYearInReviewIntroCard { templateImageUrl }  fragment singleStatCardFragment on\n          PersonalizedYearInReviewSingleStatCard { value unit isPlusText templateImageUrl } \n          fragment postCardFragment on PersonalizedYearInReviewPostCard { postId postDeeplink\n          postScore postTitle postImageUrl subredditId subredditName }  fragment commentCardFragment\n          on PersonalizedYearInReviewCommentCard { postId postDeeplink postTitle postImageUrl\n          commentId commentText commentScore commentDeeplink subredditId }  fragment\n          subredditCardFragment on PersonalizedYearInReviewSubredditCard { subredditId subredditName\n          deeplink templateImageUrl }  fragment subredditListSingleStatCardFragment on\n          PersonalizedYearInReviewSingleStatSubredditListCard { subredditList { subredditId\n          subredditName deeplink } subredditCount subredditCountSuffix }  fragment\n          subredditListCardFragment on PersonalizedYearInReviewSubredditListCard { subredditList {\n          subredditId subredditName deeplink totalTimeOnSubreddit timeUnit } }  fragment\n          shareCardFragment on PersonalizedYearInReviewShareCard { isPremium level userName\n          userKarma userAvatar subredditListOptional { subredditId subredditName deeplink } } \n          fragment endCardFragment on PersonalizedYearInReviewEndCard { subredditList { subredditId\n          subredditName deeplink } isEmailVerified isDigestEnabled }",
    },
    PollVote: {
        id: "1ca275ae4cac",
        operation: "mutation PollVote($input: UpdatePostPollVoteStateInput!) {\n          updatePostPollVoteState(input: $input) { ok poll { options { id text voteCount }\n          totalVoteCount votingEndsAt selectedOptionId } errors { message } fieldErrors { field\n          message } } }",
    },
    PopularFeedElements: {
        id: "b724ed18424e",
        operation: "query PopularFeedElements($sort: PostFeedSort, $range: PostFeedRange,\n          $after: String, $pageSize: Int, $adContext: AdContextInput,\n          $region: RegionGeoCode, $forceAds: ForceAdsInput,\n          $includeSubredditInPosts: Boolean = true , $forceGeopopular: Boolean = true ,\n          $includeTopicRecommendations: Boolean = false , $includeAwards: Boolean = true\n          , $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false , $experienceInputs:\n          [UxTargetingExperience!]!, $advancedConfiguration:\n          UxTargetingAdvancedConfigurationInput!) { postFeed: popular { elements(sort: $sort,\n          time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, region: $region, forceAds: $forceAds, forceGeopopular:\n          $forceGeopopular, uxTargetingContext: { experienceInputs: $experienceInputs\n          advancedConfiguration: $advancedConfiguration } ) { geoFilter pageInfo { __typename\n          ...pageInfoFragment } dist edges { node { __typename ...postFragment\n          ...feedAnswerableQuestionsFragment ...topicRecommendationsFeedElementFragment @include(if:\n          $includeTopicRecommendations) } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          answerableQuestionAnalyticsDataFragment on Subreddit { modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } id name publicDescriptionText\n          isNsfw type originalContentCategories isQuarantined whitelistStatus isSubscribed\n          isFavorite karma { fromComments fromPosts } }  fragment answerableQuestionsFragment on\n          Subreddit { __typename answerableQuestions { id type questionText answerOptions { id text\n          } } ...answerableQuestionAnalyticsDataFragment }  fragment feedAnswerableQuestionsFragment\n          on SubredditPost { subreddit { __typename ...answerableQuestionsFragment } }  fragment\n          interestTopicRecommendationsFragment on InterestTopicRecommendations {\n          recommendationTopics { edges { node { id topic { title name } } } } }  fragment\n          topicRecommendationsFeedElementFragment on InterestTopicRecommendationsFeedElement { id\n          topicRecommendations: recommendations { __typename ...interestTopicRecommendationsFragment\n          } }",
    },
    PostComments: {
        id: "92d399e545e8",
        operation: "query PostComments($id: ID!, $sortType: CommentSort, $after: String,\n          $maxDepth: Int, $count: Int, $includeAwards: Boolean = true ) {\n          postInfoById(id: $id) { __typename ...pdsBasicPostInfoFragment commentForest(sort:\n          $sortType, after: $after, count: $count, maxDepth: $maxDepth) {\n          __typename ...commentForestTreesFragment } commentCount } }  fragment redditorNameFragment\n          on RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          pdsBasicPostInfoFragment on PostInfo { __typename id ... on SubredditPost { subreddit { id\n          name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }\n           fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment commentFragment on Comment { id createdAt editedAt isAdminTakedown\n          isRemoved parent { id } postInfo { __typename id title ... on SubredditPost { subreddit {\n          id name prefixedName } } ... on ProfilePost { profile { redditorInfo { __typename\n          ...redditorNameFragment } } } } isLocked isInitiallyCollapsed initiallyCollapsedReason\n          content { __typename markdown html richtext typeHint ...richtextMediaFragment } authorInfo\n          { __typename ...authorInfoFragment } score voteState authorFlair { __typename\n          ...authorFlairFragment } isSaved isStickied isScoreHidden awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } associatedAward { __typename\n          ...awardFragment } treatmentTags isArchived distinguishedAs permalink moderationInfo {\n          __typename ...modReportsFragment ...userReportsFragment ...modQueueTriggersFragment\n          ...proxyAuthorInfoFragment ... on CommentModerationInfo { isAutoCollapsedFromCrowdControl\n          } verdict verdictAt banReason verdictByRedditorInfo { __typename ...redditorNameFragment }\n          reportCount isRemoved ...lastAuthorModNoteFragment } }  fragment deletedCommentFragment on\n          DeletedComment { isInitiallyCollapsed moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount\n          ...lastAuthorModNoteFragment } }  fragment commentForestTreesFragment on CommentForest {\n          trees { depth more { count cursor isTooDeepForCount } parentId node { __typename\n          ...commentFragment ...deletedCommentFragment } childCount } }",
    },
    PostSetPost: {
        id: "a73662ef1013",
        operation: "query PostSetPost($id: ID!) { postInfoById(id: $id) { __typename\n          ...PostSetPostFragment } }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment PostSetAuthorInfo on RedditorInfo { __typename ... on Redditor\n          { id name prefixedName displayName icon { __typename ...mediaSourceFragment }\n          snoovatarIcon { __typename ...mediaSourceFragment } } }  fragment mediaDimensions on\n          Dimensions { width height }  fragment PostSetPostFragment on Post { __typename id title\n          createdAt domain permalink isScoreHidden discussionType isReactAllowed url poll {\n          isPrediction } audioRoom { roomId } content { html typeHint markdown richtext\n          richtextMedia { id userId mimetype width height status } } voteState authorInfo {\n          __typename ...PostSetAuthorInfo } ... on SubredditPost { id isOwnPost subreddit { id name\n          isQuarantined prefixedName styles { icon } } otherDiscussionsCount } ... on ProfilePost {\n          id isOwnPost otherDiscussionsCount profile { redditorInfo { __typename ... on Redditor {\n          id name prefixedName icon { __typename ...mediaSourceFragment } snoovatarIcon { __typename\n          ...mediaSourceFragment } } } } } isNsfw isSpoiler isContestMode isMediaOnly media {\n          typeHint still { content { __typename ...mediaSourceFragment } } obfuscated { content {\n          __typename ...mediaSourceFragment } } animated { variant { __typename\n          ...mediaSourceFragment } } video { url embedHtml dimensions { __typename\n          ...mediaDimensions } } } liveEvent { id } poll { isPrediction } upvoteRatio commentCount\n          awardings { award { staticIcon { __typename ...mediaSourceFragment } } total } }",
    },
    PostSetSharedTo: {
        id: "b7dba9b8b4c4",
        operation: "query PostSetSharedTo($postSetId: ID!) { postSetsByIds(ids: [$postSetId]) {\n          posts { edges { node { __typename ...PostSetPostFragment } } } defaultPost { __typename\n          ...PostSetPostFragment } } identity { settings { postSetSettings { maxPostsPerPostSet } }\n          } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment PostSetAuthorInfo on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName displayName icon { __typename ...mediaSourceFragment } snoovatarIcon {\n          __typename ...mediaSourceFragment } } }  fragment mediaDimensions on Dimensions { width\n          height }  fragment PostSetPostFragment on Post { __typename id title createdAt domain\n          permalink isScoreHidden discussionType isReactAllowed url poll { isPrediction } audioRoom\n          { roomId } content { html typeHint markdown richtext richtextMedia { id userId mimetype\n          width height status } } voteState authorInfo { __typename ...PostSetAuthorInfo } ... on\n          SubredditPost { id isOwnPost subreddit { id name isQuarantined prefixedName styles { icon\n          } } otherDiscussionsCount } ... on ProfilePost { id isOwnPost otherDiscussionsCount\n          profile { redditorInfo { __typename ... on Redditor { id name prefixedName icon {\n          __typename ...mediaSourceFragment } snoovatarIcon { __typename ...mediaSourceFragment } }\n          } } } isNsfw isSpoiler isContestMode isMediaOnly media { typeHint still { content {\n          __typename ...mediaSourceFragment } } obfuscated { content { __typename\n          ...mediaSourceFragment } } animated { variant { __typename ...mediaSourceFragment } }\n          video { url embedHtml dimensions { __typename ...mediaDimensions } } } liveEvent { id }\n          poll { isPrediction } upvoteRatio commentCount awardings { award { staticIcon { __typename\n          ...mediaSourceFragment } } total } }",
    },
    PostsByIds: {
        id: "0a1ea2263831",
        operation: "query PostsByIds($ids: [ID!]!, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includeSubredditInPosts: Boolean = true , $includePostStats: Boolean = false\n          , $includeDeletedPosts: Boolean = false ) { postsInfoByIds(ids: $ids) {\n          __typename ...postContentFragment ...postFragment ...deletedPostFragment @include(if:\n          $includeDeletedPosts) } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          deletedPostFragment on DeletedSubredditPost { id createdAt title commentCount subreddit {\n          __typename ...subredditFragment } }",
    },
    Profile: {
        id: "613fdaf1f778",
        operation: "query Profile($name: String!) { redditorInfoByName(name: $name) { __typename\n          ...redditorProfileInfo } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }  fragment redditorProfileInfo on Redditor { id name isPremiumMember\n          isVerified isProfileAvailable accountType profile { subscribersCount createdAt\n          allowedPostTypes socialLinks { __typename ...socialLinkFragment } } karma { total\n          fromAwardsGiven fromAwardsReceived fromPosts fromComments } snoovatarIcon { url }\n          isAcceptingFollowers }",
    },
    ProfileTrophies: {
        id: "beaa102d7ea3",
        operation: "query ProfileTrophies($profileName: String!) { redditorInfoByName(name:\n          $profileName) { __typename ... on Redditor { trophies { description icon70Url\n          grantedAt name trophyId awardId url } } } }",
    },
    ReOrderSocialLinks: {
        id: "2dd9daf9a95c",
        operation: "mutation ReOrderSocialLinks($input: ReorderSocialLinksInput!) {\n          reorderSocialLinks(input: $input) { ok errors { message } socialLinks { __typename\n          ...socialLinkFragment } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }",
    },
    RecommendedLinkedPosts: {
        id: "c1d6334273e7",
        operation: "query RecommendedLinkedPosts($postId: ID!, $correlationId: ID!,\n          $includeSubredditInPosts: Boolean = true , $experimentVariant: String,\n          $after: String, $includeAwards: Boolean = true , $feedContext:\n          FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { postInfoById(id: $postId) { __typename\n          ... on Post { linked(correlationId: $correlationId, experimentVariant:\n          $experimentVariant) { posts(after: $after) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...postFragment } } } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    RecommendedMediaFeed: {
        id: "6d21201609d8",
        operation: "query RecommendedMediaFeed($mediaFeedContext: RecommendedMediaFeedContextInput,\n          $after: String, $pageSize: Int, $forceAds: ForceAdsInput,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false , $sort: PostFeedSort, $time:\n          PostFeedRange) { recommendedMediaFeed { elements(mediaFeedContext:\n          $mediaFeedContext, after: $after, first: $pageSize, forceAds:\n          $forceAds, sort: $sort, time: $time) { __typename pageInfo { __typename\n          ...pageInfoFragment } dist edges { __typename node { __typename ...postFragment } } } } } \n          fragment pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    RecommendedSimilarPosts: {
        id: "4f447e4f8a86",
        operation: "query RecommendedSimilarPosts($postSimilarityFeedContext:\n          RecommendedPostSimilarityFeedContextInput!, $includeSubredditInPosts: Boolean = true\n          , $first: Int, $after: String, $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { similarRecommendedPostsFeed {\n          elements(postSimilarityContext: $postSimilarityFeedContext, after: $after,\n          first: $first) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    RecommendedVideoPosts: {
        id: "79eda7995313",
        operation: "query RecommendedVideoPosts($videoFeedContext: RecommendedVideoFeedContextInput,\n          $after: String, $pageSize: Int, $includeSubredditInPosts: Boolean = true\n          , $forceAds: ForceAdsInput, $includeAwards: Boolean = true , $adContext:\n          AdContextInput, $feedContext: FeedContextInput, $includeCommentPostUnits:\n          Boolean = false , $includePostStats: Boolean = false , $sort: PostFeedSort,\n          $time: PostFeedRange) { recommendedVideoFeed { posts(videoFeedContext:\n          $videoFeedContext, after: $after, first: $pageSize, forceAds:\n          $forceAds, adContext: $adContext, sort: $sort, time: $time) {\n          __typename pageInfo { __typename ...pageInfoFragment } dist edges { __typename node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    ReportAward: {
        id: "843103adbaa5",
        operation: "mutation ReportAward($input: ReportAwardInput!) { reportAward(input: $input) {\n          ok } }",
    },
    ReportChatMessage: {
        id: "de1744f81d83",
        operation: "mutation ReportChatMessage($input: ReportChatMessageInput!) {\n          reportChatMessage(input: $input) { ok } }",
    },
    ResolvePrediction: {
        id: "98c3e0856444",
        operation: "mutation ResolvePrediction($input: ResolvePredictionInput!) {\n          resolvePrediction(input: $input) { ok poll { __typename ...postPollFragment } errors\n          { message } } }  fragment postPollOptionFragment on PostPollOption { id text voteCount\n          totalStakeAmount redditorStakeAmount }  fragment postPollFragment on PostPoll { options {\n          __typename ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId\n          isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }",
    },
    SavedComments: {
        id: "dba058853470",
        operation: "query SavedComments($after: String) { identity { savedComments(after: $after) {\n          pageInfo { __typename ...pageInfoFragment } edges { node { __typename ... on Comment { id\n          createdAt score isSaved isLocked isArchived isScoreHidden isStickied gildingTotals { type\n          { id displayName } total } permalink voteState content { __typename markdown html richtext\n          ...richtextMediaFragment } authorInfo { __typename id ...redditorNameFragment }\n          authorFlair { richtext text template { id backgroundColor textColor } } awardings {\n          __typename ...awardingTotalFragment } moderationInfo { __typename\n          ...lastAuthorModNoteFragment } } postInfo { __typename title id ... on SubredditPost {\n          subreddit { id name prefixedName } } ... on ProfilePost { profile { redditorInfo {\n          __typename id ...redditorNameFragment } } } } } } } } }  fragment pageInfoFragment on\n          PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename id\n          status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingTotalFragment on AwardingTotal { award { __typename ...awardFragment } total } \n          fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename ...\n          on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }",
    },
    SavedPosts: {
        id: "b9a4d5fa83fa",
        operation: "query SavedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { posts: savedPosts(after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges\n          { node { __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo {\n          hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    ScheduledPostsForSubreddit: {
        id: "53bcddc6b332",
        operation: "query ScheduledPostsForSubreddit($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename id ... on Subreddit { scheduledPosts { __typename\n          ...standaloneScheduledPostsFragment ...recurringScheduledPostsFragment } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }  fragment\n          standaloneScheduledPostsFragment on ScheduledPosts { standalonePosts { edges { node {\n          __typename ...scheduledPostFragment } } } }  fragment recurringScheduledPostsFragment on\n          ScheduledPosts { recurringPosts { edges { node { __typename ...scheduledPostFragment } } }\n          }",
    },
    SearchChatGifs: {
        id: "6147979d8a7f",
        operation: "query SearchChatGifs($query: String!, $first: Int, $after: String) {\n          searchChatGifs(query: $query, first: $first, after: $after) { version\n          provider pageInfo { hasNextPage endCursor } edges { node { id title downsized:\n          source(size: DOWNSIZED) { __typename ...mediaSourceFragment } fixed_height: source(size:\n          FIXED_HEIGHT) { __typename ...mediaSourceFragment } fixed_width: source(size: FIXED_WIDTH)\n          { __typename ...mediaSourceFragment } } } } }  fragment mediaSourceFragment on MediaSource\n          { url dimensions { width height } }",
    },
    SearchUserForBlock: {
        id: "d303003d704b",
        operation: "query SearchUserForBlock($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { id icon { url } } } }",
    },
    SetDefaultEmailPreferences: {
        id: "a5ff58e82b67",
        operation: "mutation SetDefaultEmailPreferences { setDefaultEmailPreferences { ok errors { message } }\n          }",
    },
    SetSocialLinks: {
        id: "8e9b0dce80ce",
        operation: "mutation SetSocialLinks($input: SetSocialLinksInput!) { setSocialLinks(input:\n          $input) { ok errors { message } socialLinks { __typename ...socialLinkFragment } } }\n           fragment socialLinkFragment on SocialLink { id type title handle outboundUrl }",
    },
    StickyPostsForSubreddit: {
        id: "5b5b8021063c",
        operation: "query StickyPostsForSubreddit($subredditName: String!,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { stickyPosts { __typename\n          ...postFragment } } } }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }  fragment imageAssetFragment on ImageAsset { __typename id status\n          mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    SubmitMediaUpload: {
        id: "0155f138621c",
        operation: "mutation SubmitMediaUpload($input: SubmitMediaInput!) { submitMedia(input:\n          $input) { errors { message } ok } }",
    },
    SubmitScheduledPostNow: {
        id: "73d77d811ed3",
        operation: "mutation SubmitScheduledPostNow($input: SubmitScheduledPostInput!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { submitScheduledPost(input: $input) { ok errors { message } post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } }\n           fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }",
    },
    SubredditChannelsDisableChannels: {
        id: "65d9b9ed868a",
        operation: "mutation SubredditChannelsDisableChannels($input: DisableChannelInSubredditInput!) {\n          disableChannelInSubreddit(input: $input) { ok errors { code message } } }",
    },
    SubredditChannelsEnableChannels: {
        id: "cbe6937385c1",
        operation: "mutation SubredditChannelsEnableChannels($input: EnableChannelsInSubredditInput!) {\n          enableChannelsInSubreddit(input: $input) { ok errors { code message } } }",
    },
    SubredditFeedElements: {
        id: "3496a5858eb9",
        operation: "query SubredditFeedElements($subredditName: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $adContext:\n          AdContextInput, $forceAds: ForceAdsInput, $feedFilters: FeedFiltersInput,\n          $optedIn: Boolean = false , $includeSubredditInPosts: Boolean!,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) @loggedOutQuarantineOptedin(isOptedIn: $optedIn) { postFeed:\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit { __typename\n          ...subredditFragment @skip(if: $includeSubredditInPosts) elements(sort: $sort,\n          time: $range, after: $after, first: $pageSize, adContext:\n          $adContext, forceAds: $forceAds, feedFilters: $feedFilters) { pageInfo {\n          __typename ...pageInfoFragment } dist edges { node { __typename ...postFragment } } } } }\n          }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          crosspostContentFragment on Post { __typename ...postContentFragment ... on SubredditPost\n          { subreddit { __typename ...subredditFragment } } }  fragment\n          promotedCommunityPostFragment on AdPost { promotedCommunityPost { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment promotedUserPostFragment on AdPost { promotedUserPosts { __typename ... on\n          SubredditPost { subreddit { __typename ...subredditFragment } } ...postContentFragment } }\n           fragment postFragment on Post { __typename ...postContentFragment ... on SubredditPost {\n          subreddit @include(if: $includeSubredditInPosts) { __typename ...subredditFragment }\n          } crosspostRoot { type post { __typename ...crosspostContentFragment } } ... on AdPost {\n          __typename ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    SubredditPostRequirements: {
        id: "71fff12d726b",
        operation: "query SubredditPostRequirements($name: String!) { subredditInfoByName(name:\n          $name) { __typename ...subredditDetailsFragment ...unavailableSubredditFragment\n          ...subredditPowerupTierAndBenefitsFragment ... on Subreddit { postRequirements {\n          __typename ...postRequirementsFragment } } } }  fragment subredditDetailsFragment on\n          Subreddit { id name prefixedName styles { legacyIcon { url } legacyPrimaryColor\n          legacyBannerBackgroundImage primaryColor icon bannerBackgroundImage mobileBannerImage }\n          title description { markdown richtext } publicDescriptionText subscribersCount activeCount\n          createdAt type path isNsfw wikiEditMode whitelistStatus isPostingRestricted isQuarantined\n          quarantineMessage { markdown richtext } interstitialWarningMessage { markdown richtext }\n          allowedPostTypes isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable\n          isPredictionAllowed isUserBanned isContributor modPermissions { isAllAllowed\n          isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed\n          isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator\n          isChannelsEditingAllowed isCommunityChatEditingAllowed } isSubscribed isFavorite\n          notificationLevel authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled }\n          authorFlair { template { id backgroundColor textColor text richtext } } postFlairSettings\n          { isEnabled } originalContentCategories predictionLeaderboardEntryType\n          isPredictionsTournamentAllowed isTitleSafe isMediaInCommentsSettingShown\n          allowedMediaInComments isMuted isChannelsEnabled }  fragment unavailableSubredditFragment\n          on UnavailableSubreddit { id name createdAt publicDescriptionText isQuarantined\n          forbiddenReason banTitle banMessage banMessageContent { markdown richtext html }\n          isEmailRequiredForQuarantineOptin quarantineMessage { markdown richtext html typeHint }\n          interstitialWarningMessage { markdown richtext } isContributorRequestsDisabled }  fragment\n          subredditPowerupTierAndBenefitsFragment on Subreddit { id name powerups { tier count\n          benefits supportersCount tiersInfo { tier powerupsCost benefits } } powerupsSettings {\n          benefitStatuses { benefit isEnabled } } }  fragment postRequirementsFragment on\n          PostRequirements { bodyBlacklistedStrings bodyRegexes bodyRequiredStrings\n          bodyRestrictionPolicy domainBlacklist domainWhitelist galleryCaptionsRequirement\n          galleryMaxItems galleryMinItems galleryUrlsRequirement guidelinesText isFlairRequired\n          linkRepostAge linkRestrictionPolicy titleBlacklistedStrings titleRegexes\n          titleRequiredStrings titleTextMaxLength titleTextMinLength }",
    },
    SubredditTopPredictors: {
        id: "5fbcf0adc4bd",
        operation: "query SubredditTopPredictors($subredditName: String!, $period: RankPeriod!,\n          $top: Int, $tournamentId: ID) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { prefixedName\n          predictionWinners(period: $period, top: $top, tournamentId:\n          $tournamentId) { topPredictorsRank { __typename ...redditorRankFragment }\n          currentRank { __typename ...redditorRankFragment } } } } }  fragment mediaSourceFragment\n          on MediaSource { url dimensions { width height } }  fragment redditorResizedIconsFragment\n          on Redditor { icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment } icon_32:\n          icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth: 48) {\n          __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } icon_72: icon(maxWidth: 72) { __typename ...mediaSourceFragment }\n          icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth:\n          128) { __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment\n          } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment } icon_384:\n          icon(maxWidth: 384) { __typename ...mediaSourceFragment } }  fragment redditorFragment on\n          Redditor { __typename id name ...redditorResizedIconsFragment snoovatarIcon { url }\n          profile { isNsfw } }  fragment redditorRankFragment on RedditorRank { __typename ... on\n          RedditorRank { redditor { __typename ...redditorFragment } score rank } }",
    },
    SubredditWikiIndex: {
        id: "b4dec52c105c",
        operation: "query SubredditWikiIndex($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { id wiki { index { status pageTree {\n          __typename ...subredditWikiPageNodeFragment } } } } } }  fragment\n          subredditWikiPageNodeFragment on SubredditWikiPageNode { name path depth isPagePresent\n          parent }",
    },
    SubredditWikiPage: {
        id: "854c86cafc54",
        operation: "query SubredditWikiPage($subredditName: String!, $pageName: String) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit { id wiki {\n          page(name: $pageName) { __typename ...subredditWikiPageFragment } } } } }  fragment\n          redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name prefixedName }\n          ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          subredditWikiPageFragment on SubredditWikiPage { name status content { richtext } revision\n          { authorInfo { __typename ...redditorNameFragment } revisedAt } }",
    },
    SuggestSubredditGeoPlace: {
        id: "4d823485ac9b",
        operation: "mutation SuggestSubredditGeoPlace($input: SuggestedSubredditGeoPlaceInput!) {\n          suggestSubredditGeoPlace(input: $input) { ok errors { message } } }",
    },
    SuggestedUsernames: {
        id: "f79226720242",
        operation: "query SuggestedUsernames($count: Int!) { generatedUsernames(count: $count) }",
    },
    TopicBySlug: {
        id: "aac21de08738",
        operation: "query TopicBySlug($topicSlug: String!, $includePosts: Boolean!,\n          $includeSubreddits: Boolean!, $firstPosts: Int, $afterPosts: String,\n          $firstSubreddits: Int, $afterSubreddits: String,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { topicBySlug(slug: $topicSlug) { id name\n          posts(first: $firstPosts, after: $afterPosts) @include(if:\n          $includePosts) { dist pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } subreddits(first: $firstSubreddits, after:\n          $afterSubreddits) @include(if: $includeSubreddits) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ...subredditFragment publicDescriptionText\n          } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    UpdateAccountGender: {
        id: "f89616da2d38",
        operation: "mutation UpdateAccountGender($input: UpdateAccountGender!) {\n          updateAccountGender(input: $input) { ok errors { message } } }",
    },
    UpdateAchievementFlairPreference: {
        id: "8570f9437bfa",
        operation: "mutation UpdateAchievementFlairPreference($subredditId: ID!, $displayTypes:\n          [String!]!, $isHidden: Boolean!) { updateAchievementFlairPreference(input: {\n          subredditId: $subredditId displayTypes: $displayTypes isHidden:\n          $isHidden } ) { ok errors { message } } }",
    },
    UpdateChatMessageReaction: {
        id: "065553170cff",
        operation: "mutation UpdateChatMessageReaction($channelSendbirdId: ID!, $messageSendbirdId:\n          ID!, $reactionIconKey: ID!, $type: MessageReactionUpdateType!) {\n          updateChatMessageReaction(input: { channelSendbirdId: $channelSendbirdId\n          messageSendbirdId: $messageSendbirdId reactionIconKey: $reactionIconKey type:\n          $type } ) { ok errors { message } } }",
    },
    UpdateComment: {
        id: "170e2f7d2276",
        operation: "mutation UpdateComment($input: UpdateCommentInput!) { updateComment(input:\n          $input) { content { markdown html richtext } ok errors { message } fieldErrors {\n          message } } }",
    },
    UpdateCommentDistinguishState: {
        id: "0e01aa628016",
        operation: "mutation UpdateCommentDistinguishState($input: UpdateCommentDistinguishStateInput!) {\n          updateCommentDistinguishState(input: $input) { ok errors { message } } }",
    },
    UpdateCommentFollowState: {
        id: "12ba7facfc65",
        operation: "mutation UpdateCommentFollowState($input: UpdateCommentFollowStateInput!) {\n          updateCommentFollowState(input: $input) { ok errors { message } } }",
    },
    UpdateCommentSaveState: {
        id: "71d91a68d862",
        operation: "mutation UpdateCommentSaveState($input: UpdateCommentSaveStateInput!) {\n          updateCommentSaveState(input: $input) { ok errors { message } } }",
    },
    UpdateCommentVoteState: {
        id: "f8389dda844d",
        operation: "mutation UpdateCommentVoteState($input: UpdateCommentVoteStateInput!) {\n          updateCommentVoteState(input: $input) { ok errors { message } } }",
    },
    UpdateCommunityDiscoveryPreference: {
        id: "720ca7e6d25b",
        operation: "mutation UpdateCommunityDiscoveryPreference($input:\n          UpdateRedditorCommunityDiscoveryPreferenceInput!) {\n          updateRedditorCommunityDiscoveryPreference(input: $input) { ok } }",
    },
    UpdateCrowdControlFilter: {
        id: "3785f4c24d61",
        operation: "mutation UpdateCrowdControlFilter($postId: ID!, $isEnabled: Boolean!) {\n          updatePostCrowdControlFilter(input: { postId: $postId isEnabled: $isEnabled }\n          ) { ok errors { message } } }",
    },
    UpdateInboxActivitySeenState: {
        id: "f10c9b175648",
        operation: "mutation UpdateInboxActivitySeenState($input: UpdateInboxActivitySeenStateInput!) {\n          updateInboxActivitySeenState(input: $input) { ok badgeIndicators { __typename\n          ...badgeIndicatorsFragment } } }  fragment badgeIndicatorsFragment on BadgeIndicators {\n          directMessages { count style } chatTab { count style } messageTab { count style }\n          activityTab { count style } inboxTab { count style } appBadge { count style }\n          chatHasNewMessages { style isShowing } }",
    },
    UpdateModPnSettingStatus: {
        id: "83332bed8697",
        operation: "mutation UpdateModPnSettingStatus($input: UpdateModPnSettingStatusInput!) {\n          updateModPnSettingStatus(input: $input) { ok errors { message } } }",
    },
    UpdateModPnSettingThreshold: {
        id: "a5bcec9a699e",
        operation: "mutation UpdateModPnSettingThreshold($input: UpdateModPnSettingThresholdInput!) {\n          updateModPnSettingThreshold(input: $input) { ok errors { message } } }",
    },
    UpdatePost: {
        id: "dd2b31a17893",
        operation: "mutation UpdatePost($input: UpdatePostInput!) { updatePost(input: $input) {\n          content { __typename markdown html richtext ...richtextMediaFragment } ok errors { message\n          } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }",
    },
    UpdatePostCrowdControlLevel: {
        id: "fefe7490745b",
        operation: "mutation UpdatePostCrowdControlLevel($input: UpdatePostCrowdControlLevelInput!) {\n          updatePostCrowdControlLevel(input: $input) { ok errors { message } } }",
    },
    UpdatePostDistinguishState: {
        id: "29b8bad68174",
        operation: "mutation UpdatePostDistinguishState($input: UpdatePostDistinguishStateInput!) {\n          updatePostDistinguishState(input: $input) { ok errors { message } } }",
    },
    UpdatePostFollowState: {
        id: "c61d234b0d5a",
        operation: "mutation UpdatePostFollowState($input: UpdatePostFollowStateInput!) {\n          updatePostFollowState(input: $input) { ok errors { message } } }",
    },
    UpdatePostHideState: {
        id: "7335ed17a7b9",
        operation: "mutation UpdatePostHideState($input: UpdatePostHideStateInput!) {\n          updatePostHideState(input: $input) { ok } }",
    },
    UpdatePostNsfwState: {
        id: "b886714b0319",
        operation: "mutation UpdatePostNsfwState($input: UpdatePostNSFWStateInput!) {\n          updatePostNsfwState(input: $input) { ok errors { message } } }",
    },
    UpdatePostSaveState: {
        id: "041bcf30ba0d",
        operation: "mutation UpdatePostSaveState($input: UpdatePostSaveStateInput!) {\n          updatePostSaveState(input: $input) { ok errors { message } } }",
    },
    UpdatePostSetPostVoteState: {
        id: "8796363d9781",
        operation: "mutation UpdatePostSetPostVoteState($input: UpdatePostVoteStateInput!) {\n          updatePostVoteState(input: $input) { ok voteState errors { message code } } }",
    },
    UpdatePostVoteState: {
        id: "8b4e5777bf42",
        operation: "mutation UpdatePostVoteState($input: UpdatePostVoteStateInput!) {\n          updatePostVoteState(input: $input) { ok errors { message } } }",
    },
    UpdatePredictionTournament: {
        id: "eaf793530938",
        operation: "mutation UpdatePredictionTournament($input: UpdatePredictionTournamentInput!) {\n          updatePredictionTournament(input: $input) { ok errors { message } tournament {\n          __typename ...predictionTournamentFragment } } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }",
    },
    UpdateRecommendationPreferences: {
        id: "7679b39b8a60",
        operation: "mutation UpdateRecommendationPreferences($input:\n          UpdateRecommendationPreferencesInput!) { updateRecommendationPreferences(input:\n          $input) { ok errors { message } } }",
    },
    UpdateRedditorBlockState: {
        id: "3bdaa10d7cb6",
        operation: "mutation UpdateRedditorBlockState($redditorId: ID!, $blockState: BlockState!) {\n          updateRedditorBlockState(input: { redditorId: $redditorId blockState:\n          $blockState } ) { ok } }",
    },
    UpdateRedditorFriendState: {
        id: "b020e3618e91",
        operation: "mutation UpdateRedditorFriendState($input: UpdateRedditorFriendStateInput!) {\n          updateRedditorFriendState(input: $input) { ok } }",
    },
    UpdateScheduledPost: {
        id: "d22dc8c92074",
        operation: "mutation UpdateScheduledPost($input: UpdateScheduledPostInput!) {\n          updateScheduledPost(input: $input) { ok errors { message } scheduledPost {\n          __typename ...scheduledPostFragment } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment imageAssetFragment on ImageAsset { __typename\n          id status mimetype width height url small: preview(maxWidth: 108) { __typename\n          ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment scheduledPostFragment on ScheduledPost {\n          id title body postKind isSpoiler isNsfw isOriginalContent isSendReplies sticky\n          distinguishedAs flair { type text textColor richtext template { backgroundColor cssClass\n          id isEditable isModOnly text textColor type richtext } } subreddit { __typename id name\n          ... on Subreddit { path prefixedName } } clientTimezone frequency interval byMonthDays\n          byWeekDays publishAt owner { __typename id ... on Redditor { prefixedName name } }\n          contentType state url mediaAssets { __typename ...mediaAssetFragment } }",
    },
    UpdateSocialLinks: {
        id: "98f39bb6e223",
        operation: "mutation UpdateSocialLinks($input: UpdateSocialLinksInput!) {\n          updateSocialLinks(input: $input) { socialLinks { __typename ...socialLinkFragment }\n          ok errors { message } } }  fragment socialLinkFragment on SocialLink { id type title\n          handle outboundUrl }",
    },
    UpdateSubredditCountrySettings: {
        id: "7ca5effa3697",
        operation: "mutation UpdateSubredditCountrySettings($input:\n          UpdateSubredditCountrySiteSettingsInput!) { updateSubredditCountrySiteSettings(input:\n          $input) { ok errors { message } subreddit { __typename ... on Subreddit { __typename\n          ...subredditCountryFragment } } } }  fragment subredditCountryFragment on Subreddit {\n          countrySiteSettings { countryCode languageCode isCountrySiteEditable modMigrationAt } }",
    },
    UpdateTopicPreferences: {
        id: "771e5213ed51",
        operation: "mutation UpdateTopicPreferences($input: TopicPreferencesInput!) {\n          updateTopicPreferences(input: $input) { ok errors { message } } }",
    },
    UpdateVideoContentPermissionSettings: {
        id: "24eb52ccceac",
        operation: "mutation UpdateVideoContentPermissionSettings($input:\n          UpdateVideoContentPermissionSettingsInput!) { updateVideoContentPermissionSettings(input:\n          $input) { ok errors { message } } }",
    },
    UpvotedPosts: {
        id: "ca2b28922357",
        operation: "query UpvotedPosts($after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { identity { upvotedPosts(after: $after,\n          first: $pageSize) { pageInfo { __typename ...pageInfoFragment } edges { node {\n          __typename ...postFragment } } } } }  fragment pageInfoFragment on PageInfo { hasNextPage\n          endCursor }  fragment mediaSourceFragment on MediaSource { url dimensions { width height }\n          }  fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height\n          url small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    UserAvatarInfo: {
        id: "f7590a8b2a75",
        operation: "query UserAvatarInfo { avatarBuilderCatalog { userCapabilities avatar { __typename\n          ...avatarFragment } } }  fragment avatarFragment on UserAvatar { id accountId accessoryIds\n          backgroundInventoryItem { id } fullImage { url dimensions { width height } } headshotImage\n          { url dimensions { width height } } lastRenderAt lastUpdateAt styles { className fill }\n          tags }",
    },
    UserSubmittedPostSets: {
        id: "f26daed5146e",
        operation: "query UserSubmittedPostSets($username: String!, $sort: PostFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int, $filter:\n          ProfileElementsQueryType!, $includeSubredditInPosts: Boolean = true ,\n          $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { postFeed: redditorInfoByName(name: $username) { __typename ... on Redditor {\n          elements(filter: $filter, sort: $sort, time: $range, after:\n          $after, first: $pageSize) { pageInfo { __typename ...pageInfoFragment } dist\n          edges { node { __typename ...postFragment ...postSetFragment } } } profile { __typename\n          ...profilePinnedPostsFragment } } } identity { settings { postSetSettings {\n          maxPostsPerPostSet } } } }  fragment pageInfoFragment on PageInfo { hasNextPage endCursor\n          }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment imageAssetFragment on ImageAsset { __typename id status mimetype width height url\n          small: preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          preview(maxWidth: 216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          subredditDetailFragment on Post { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ... on ProfilePost { profile { __typename ...profileFragment } }\n          ... on AdPost { profile { __typename ...profileFragment } } crosspostRoot { post {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } } ... on\n          ProfilePost { profile { __typename ...profileFragment } } ... on AdPost { profile {\n          __typename ...profileFragment } } } } }  fragment postConnectionFragment on PostConnection\n          { pageInfo { __typename ...pageInfoFragment } edges { node { __typename ...postFragment }\n          } }  fragment postSetFragment on PostSet { id defaultPost { __typename ...postFragment\n          ...subredditDetailFragment } posts { __typename ...postConnectionFragment edges { node {\n          __typename ...subredditDetailFragment } } } }  fragment profilePinnedPostsFragment on\n          Profile { stickyPosts { __typename ... on PostInfo { id } } }",
    },
    UserSubmittedPosts: {
        id: "05c92a01a47b",
        operation: "query UserSubmittedPosts($username: String!, $sort: ProfileFeedSort,\n          $range: PostFeedRange, $after: String, $pageSize: Int,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { postFeed: redditorInfoByName(name:\n          $username) { __typename ... on Redditor { posts(sort: $sort, time:\n          $range, after: $after, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } dist edges { node { __typename ...postFragment } } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    UsernameAndExperiments: {
        id: "a56c64034ea6",
        operation: "query UsernameAndExperiments($inputs: [ExperimentTargetingInput!]) { identity {\n          redditor { name } } experimentVariants(inputs: $inputs) { name experimentName\n          version } }",
    },
    VotePrediction: {
        id: "0d5b66ff5e5e",
        operation: "mutation VotePrediction($input: VotePredictionInput!) { votePrediction(input:\n          $input) { ok poll { __typename ...postPollFragment } errors { message } } } \n          fragment postPollOptionFragment on PostPollOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment postPollFragment on PostPoll { options { __typename\n          ...postPollOptionFragment } totalVoteCount votingEndsAt selectedOptionId isPrediction\n          totalStakeAmount resolvedOptionId wonAmount tournamentId voteUpdatesRemained\n          predictionStatus }",
    },
    CommunityPickerSearch: {
        id: "cd28e13f4121",
        operation: "query CommunityPickerSearch($query: String!, $isNsfwIncluded: Boolean!) {\n          subredditTypeahead(query: $query, isNsfwIncluded: $isNsfwIncluded) {\n          subreddits { edges { node { __typename ...subredditPickerInfo } } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          subredditPickerInfo on Subreddit { id name title type subscribersCount activeCount\n          isSubscribed isFavorite isNsfw isTitleSafe isQuarantined isUserBanned isThumbnailsEnabled\n          allowedPostTypes publicDescriptionText styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } } modPermissions { isAccessEnabled } submitText rules { name\n          content { richtext } } powerups { benefits } }",
    },
    CommunityTopics: {
        id: "9cddc66837b0",
        operation: "query CommunityTopics($pageSize: Int, $after: String,\n          $isOnlyRecommendedIncluded: Boolean) { globalTags(first: $pageSize, after:\n          $after, isOnlyRecommendedIncluded: $isOnlyRecommendedIncluded) { pageInfo {\n          hasNextPage hasPreviousPage startCursor endCursor } edges { node { id type text\n          isRecommended } } } }",
    },
    CompleteCommunityProgressCard: {
        id: "fe7c307bbec5",
        operation: "mutation CompleteCommunityProgressCard($input: CompleteCommunityProgressCardInput!) {\n          completeCommunityProgressCard(input: $input) { ok errors { message } } }",
    },
    CompleteCommunityProgressModule: {
        id: "6d1d232caaf8",
        operation: "mutation CompleteCommunityProgressModule($input:\n          CompleteCommunityProgressModuleInput!) { completeCommunityProgressModule(input:\n          $input) { ok errors { message } } }",
    },
    ComposeSearchSubreddits: {
        id: "aa875c3f5dff",
        operation: "query ComposeSearchSubreddits($query: String!, $isNsfwIncluded: Boolean!) {\n          subredditTypeahead(query: $query, isNsfwIncluded: $isNsfwIncluded) {\n          subreddits { edges { node { id isNsfw name prefixedName subscribersCount styles { icon\n          primaryColor legacyIcon { url } } allowedPostTypes } } } } }",
    },
    CreateSubreddit: {
        id: "f36741961757",
        operation: "mutation CreateSubreddit($input: CreateSubredditInput!) { createSubreddit(input:\n          $input) { ok errors { message } fieldErrors { field message } subreddit { __typename\n          ... on Subreddit { __typename ...subredditDataFragment } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          subredditDataFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments\n          myRedditSettings { isEnabled } isMuted isChannelsEnabled }",
    },
    CreateSubredditChannel: {
        id: "fce3ce519f81",
        operation: "mutation CreateSubredditChannel($input: CreateSubredditChannelInput!) {\n          createSubredditChannel(input: $input) { ok channel { __typename id name ... on\n          SubredditChatChannel { roomId } } errors { message code } } }",
    },
    DeleteSubredditChannel: {
        id: "51105bf01fb9",
        operation: "mutation DeleteSubredditChannel($input: DeleteSubredditChannelInput!) {\n          deleteSubredditChannel(input: $input) { ok errors { message code } } }",
    },
    DismissCommunityProgressCard: {
        id: "51296c908b12",
        operation: "mutation DismissCommunityProgressCard($input: DismissCommunityProgressCardInput!) {\n          dismissCommunityProgressCard(input: $input) { ok errors { message } } }",
    },
    DismissCommunityProgressModule: {
        id: "c4d93c9cc453",
        operation: "mutation DismissCommunityProgressModule($input: DismissCommunityProgressModuleInput!)\n          { dismissCommunityProgressModule(input: $input) { ok errors { message } } }",
    },
    GetIsSubredditChannelsEnabled: {
        id: "3d5c651a1ecb",
        operation: "query GetIsSubredditChannelsEnabled($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          isSubredditChannelsEnabled { isChatEnabled isPostEnabled } } } }",
    },
    GetSubredditIsChannelsEnabled: {
        id: "ca3278673f4c",
        operation: "query GetSubredditIsChannelsEnabled($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          isChannelsEnabled } } }",
    },
    GetSubredditPostChannels: {
        id: "e0055894b3b4",
        operation: "query GetSubredditPostChannels($subredditName: String!, $sort: PostFeedSort,\n          $range: PostFeedRange) { subredditInfoByName(name: $subredditName) {\n          __typename ... on Subreddit { postFlairTemplates(sort: $sort, timeRange:\n          $range) { id text isModOnly } } } }",
    },
    GetSubredditSettings: {
        id: "b18f7ad07249",
        operation: "query GetSubredditSettings($id: ID!) { subredditInfoById(id: $id) { __typename\n          id ... on Subreddit { isTopListingAllowed isDiscoveryAllowed language allAllowedPostTypes\n          isChatPostFeatureEnabled isChatPostCreationAllowed postFlairSettings { isEnabled\n          isSelfAssignable } authorFlairSettings { isEnabled isSelfAssignable }\n          isArchivePostsEnabled countrySiteSettings { countryCode languageCode isCountrySiteEditable\n          modMigrationAt } commentContributionSettings { allowedMediaTypes }\n          isSubredditChannelsEnabled { isChatEnabled isPostEnabled } } } }",
    },
    ModeratedSubredditsByUserId: {
        id: "1c3a192577b9",
        operation: "query ModeratedSubredditsByUserId($userId: ID!, $before: String, $after:\n          String, $first: Int, $last: Int) { redditorInfoById(id: $userId) {\n          __typename ... on Redditor { moderatedSubreddits(before: $before, after:\n          $after, first: $first, last: $last) { edges { node { __typename\n          ...subredditDataDetailsFragment } } pageInfo { hasNextPage hasPreviousPage startCursor\n          endCursor } } } } }  fragment subredditDataDetailsFragment on Subreddit { id name\n          prefixedName styles { legacyIcon { url } legacyPrimaryColor legacyBannerBackgroundImage\n          primaryColor icon bannerBackgroundImage mobileBannerImage } title description { markdown\n          richtext } publicDescriptionText subscribersCount activeCount createdAt type path isNsfw\n          wikiEditMode whitelistStatus isPostingRestricted isQuarantined quarantineMessage {\n          markdown richtext } interstitialWarningMessage { markdown richtext } allowedPostTypes\n          isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable isPredictionAllowed\n          isUserBanned isContributor modPermissions { isAllAllowed isAccessEnabled\n          isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed isPostEditingAllowed\n          isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator isChannelsEditingAllowed\n          isCommunityChatEditingAllowed } isSubscribed isFavorite notificationLevel\n          authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled } authorFlair {\n          template { id backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          originalContentCategories predictionLeaderboardEntryType isPredictionsTournamentAllowed\n          isTitleSafe isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled\n          }",
    },
    ProfileDetailsByName: {
        id: "050736e974ae",
        operation: "query ProfileDetailsByName($profileName: String!) { profileByName(name:\n          $profileName) { __typename ...profileDetailsFragment } }  fragment\n          profileDetailsFragment on Profile { redditorInfo { __typename ... on Redditor {\n          prefixedName } } id name styles { legacyIcon { url } legacyPrimaryColor\n          legacyBannerBackgroundImage icon } title description { markdown richtext }\n          publicDescriptionText subscribersCount activeCount createdAt path isNsfw whitelistStatus\n          isQuarantined allowedPostTypes isChatPostCreationAllowed isChatPostFeatureEnabled\n          isSpoilerAvailable isPredictionAllowed isUserBanned isContributor modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } isSubscribed\n          isFavorite authorFlairSettings { isEnabled isSelfAssignable } authorFlair { template { id\n          backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          predictionLeaderboardEntryType isPredictionsTournamentAllowed }",
    },
    ProfileDetailsByNames: {
        id: "8956845d4643",
        operation: "query ProfileDetailsByNames($profileNames: [String!]!) { profilesByNames(names:\n          $profileNames) { __typename ...profileDetailsFragment } }  fragment\n          profileDetailsFragment on Profile { redditorInfo { __typename ... on Redditor {\n          prefixedName } } id name styles { legacyIcon { url } legacyPrimaryColor\n          legacyBannerBackgroundImage icon } title description { markdown richtext }\n          publicDescriptionText subscribersCount activeCount createdAt path isNsfw whitelistStatus\n          isQuarantined allowedPostTypes isChatPostCreationAllowed isChatPostFeatureEnabled\n          isSpoilerAvailable isPredictionAllowed isUserBanned isContributor modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } isSubscribed\n          isFavorite authorFlairSettings { isEnabled isSelfAssignable } authorFlair { template { id\n          backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          predictionLeaderboardEntryType isPredictionsTournamentAllowed }",
    },
    ProfileIsSubscribed: {
        id: "d74cf59716a7",
        operation: "query ProfileIsSubscribed($name: String!) { profileByName(name: $name) { name\n          isSubscribed } }",
    },
    RecordCrowdsourcedAnswer: {
        id: "264015f786e4",
        operation: "mutation RecordCrowdsourcedAnswer($input: CrowdsourcedAnswerInput!) {\n          recordCrowdsourcedAnswer(input: $input) { ok errors { message } } }",
    },
    RelatedSubreddits: {
        id: "0e590935f139",
        operation: "query RelatedSubreddits($id: ID!) { subredditInfoById(id: $id) { __typename ...\n          on Subreddit { id difficultyScore name prefixedName isChatPostCreationAllowed\n          isChatPostFeatureEnabled isNsfw subscribersCount styles { icon primaryColor }\n          relatedSubreddits(includeModRecommended: true) { difficultyScore similarityScore subreddit\n          { id isNsfw name isChatPostCreationAllowed isChatPostFeatureEnabled prefixedName\n          subscribersCount styles { icon primaryColor } } } } } }",
    },
    SubredditFeedSdui: {
        id: "61175d2d9f1d",
        operation: "query SubredditFeedSdui($subredditName: String!, $adContextInput:\n          AdContextInput, $feedContextInput: FeedContextInput, $sort: PostFeedSort,\n          $time: PostFeedRange, $after: String, $includeViewCount: Boolean = false\n          ) { subredditV3(name: $subredditName, adContext: $adContextInput, feedContext:\n          $feedContextInput) { elements(sort: $sort, time: $time, after:\n          $after) { dist pageInfo { endCursor } edges { __typename ...FeedElementEdgeFragment\n          } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl ctaMediaColor promoLayout\n          adInstanceId domain isCreatedFromAdsUi callToAction impressionId isBlankAd isSurveyAd\n          isInAppBrowserOverride isVideo adLinkUrl adEvents { type url } appStoreData { appName\n          appIcon category downloadCount appRating } gallery { caption outboundUrl displayAddress\n          callToAction adEvents { type url } } campaign { id } formatData { id\n          leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    SubredditInfoByName: {
        id: "d78cced1fc3b",
        operation: "query SubredditInfoByName($subredditName: String!, $loggedOutIsOptedIn: Boolean\n          = false , $filterGated: Boolean = true )\n          @checkGatedSubredditStatus(filterGatedContent: $filterGated, loggedOutIsOptedIn:\n          $loggedOutIsOptedIn) { subredditInfoByName(name: $subredditName) { __typename\n          ...subredditDataDetailsFragment ...unavailableSubredditFragment } }  fragment\n          subredditDataDetailsFragment on Subreddit { id name prefixedName styles { legacyIcon { url\n          } legacyPrimaryColor legacyBannerBackgroundImage primaryColor icon bannerBackgroundImage\n          mobileBannerImage } title description { markdown richtext } publicDescriptionText\n          subscribersCount activeCount createdAt type path isNsfw wikiEditMode whitelistStatus\n          isPostingRestricted isQuarantined quarantineMessage { markdown richtext }\n          interstitialWarningMessage { markdown richtext } allowedPostTypes\n          isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable isPredictionAllowed\n          isUserBanned isContributor modPermissions { isAllAllowed isAccessEnabled\n          isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed isPostEditingAllowed\n          isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator isChannelsEditingAllowed\n          isCommunityChatEditingAllowed } isSubscribed isFavorite notificationLevel\n          authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled } authorFlair {\n          template { id backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          originalContentCategories predictionLeaderboardEntryType isPredictionsTournamentAllowed\n          isTitleSafe isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled\n          }  fragment unavailableSubredditFragment on UnavailableSubreddit { id name createdAt\n          publicDescriptionText isQuarantined forbiddenReason banTitle banMessage banMessageContent\n          { markdown richtext html } isEmailRequiredForQuarantineOptin quarantineMessage { markdown\n          richtext html typeHint } interstitialWarningMessage { markdown richtext }\n          isContributorRequestsDisabled }",
    },
    SubredditIsSubscribed: {
        id: "765bd1a228a5",
        operation: "query SubredditIsSubscribed($name: String!) { subredditInfoByName(name: $name)\n          { __typename ... on Subreddit { isSubscribed id } ... on UnavailableSubreddit { id } }\n          }",
    },
    SubredditPrimaryTag: {
        id: "61e8232685cb",
        operation: "query SubredditPrimaryTag($id: ID!) { subredditInfoById(id: $id) { __typename\n          ... on Subreddit { primaryTag { tag { __typename ...communityTagFragment } } } } } \n          fragment communityTagFragment on Tag { id type text isRecommended }",
    },
    SubredditQuestionsBySubredditName: {
        id: "5b1c03ab015f",
        operation: "query SubredditQuestionsBySubredditName($subredditName: String!,\n          $includeCommunityProgressV2Module: Boolean!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { __typename contentRatingSurvey {\n          version questions { __typename ...questionFragment } isEligible response { id version\n          createdAt isFromMod status rating { rating weight name description icon { png } }\n          ratingReasons { contentRatingReasonText contentRatingTag { rating weight name description\n          icon { png } } } } } ...answerableQuestionsFragment communityProgressModule { id\n          displayText cards { id name title bodyText iconIdentifier colorIdentifier buttons {\n          __typename ... on CommunityProgressUrlButton { buttonText url } ... on\n          CommunityProgressShareButton { buttonText } ... on CommunityProgressMakePostButton {\n          buttonText postTitle postBody { markdown } postRepeatFrequency } } } }\n          communityProgressV2Module: communityProgressModule @include(if:\n          $includeCommunityProgressV2Module) { id displayText description progress { done\n          total } badgeIndicator { count style } isLastAvailable cards { id title bodyContent {\n          richtext } status progress { done total } primaryButton { __typename\n          ...communityProgressButtonFragment } iconIdentifier colorIdentifier buttons { __typename\n          ...communityProgressButtonFragment } } } } } }  fragment questionFragment on\n          ContentRatingSurveyQuestion { id questionTextMarkdown pageType answerOptions { __typename\n          id answerText isMutuallyExclusive ... on ContentRatingSurveyBranchAnswer { subQuestions {\n          id questionTextMarkdown pageType answerOptions { __typename ... on\n          ContentRatingSurveyAnswer { id answerText isMutuallyExclusive } ... on\n          ContentRatingSurveyLeafAnswer { contentRatingReasonText contentRatingTag { rating weight\n          name description icon { png } } } } } } ... on ContentRatingSurveyLeafAnswer {\n          contentRatingReasonText contentRatingTag { rating weight name description icon { png } } }\n          } }  fragment answerableQuestionAnalyticsDataFragment on Subreddit { modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } id name\n          publicDescriptionText isNsfw type originalContentCategories isQuarantined whitelistStatus\n          isSubscribed isFavorite karma { fromComments fromPosts } }  fragment\n          answerableQuestionsFragment on Subreddit { __typename answerableQuestions { id type\n          questionText answerOptions { id text } } ...answerableQuestionAnalyticsDataFragment } \n          fragment communityProgressButtonFragment on CommunityProgressButton { __typename ... on\n          CommunityProgressUrlButton { buttonText url } ... on CommunityProgressShareButton {\n          buttonText } ... on CommunityProgressMakePostButton { buttonText postTitle postBody {\n          markdown } postRepeatFrequency } }",
    },
    SubredditRatingSurveySubmitResponse: {
        id: "651a6a26ad4d",
        operation: "mutation SubredditRatingSurveySubmitResponse($input:\n          ContentRatingSurveyResponseInput!) { submitContentRatingSurvey(input: $input) { ok\n          errors { message } } }",
    },
    SubredditStructuredStyle: {
        id: "e5e94bfa1ba8",
        operation: "query SubredditStructuredStyle($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename ... on Subreddit { id styles { __typename\n          ...subredditStylesFragment } } } }  fragment subredditStylesFragment on SubredditStyles {\n          icon primaryColor bannerBackgroundImage bannerBackgroundColor\n          bannerBackgroundImagePosition mobileBannerImage postDownvoteIconActive\n          postDownvoteIconInactive postDownvoteCountColor postUpvoteIconActive\n          postUpvoteIconInactive postUpvoteCountColor postPlaceholderImage\n          postPlaceholderImagePosition postVoteIcons highlightColor }",
    },
    SubredditsInfoByNames: {
        id: "117a9a1e0ad8",
        operation: "query SubredditsInfoByNames($subredditNames: [String!]!) {\n          subredditsInfoByNames(names: $subredditNames) { __typename\n          ...subredditDataDetailsFragment ...unavailableSubredditFragment } }  fragment\n          subredditDataDetailsFragment on Subreddit { id name prefixedName styles { legacyIcon { url\n          } legacyPrimaryColor legacyBannerBackgroundImage primaryColor icon bannerBackgroundImage\n          mobileBannerImage } title description { markdown richtext } publicDescriptionText\n          subscribersCount activeCount createdAt type path isNsfw wikiEditMode whitelistStatus\n          isPostingRestricted isQuarantined quarantineMessage { markdown richtext }\n          interstitialWarningMessage { markdown richtext } allowedPostTypes\n          isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable isPredictionAllowed\n          isUserBanned isContributor modPermissions { isAllAllowed isAccessEnabled\n          isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed isPostEditingAllowed\n          isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator isChannelsEditingAllowed\n          isCommunityChatEditingAllowed } isSubscribed isFavorite notificationLevel\n          authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled } authorFlair {\n          template { id backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          originalContentCategories predictionLeaderboardEntryType isPredictionsTournamentAllowed\n          isTitleSafe isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled\n          }  fragment unavailableSubredditFragment on UnavailableSubreddit { id name createdAt\n          publicDescriptionText isQuarantined forbiddenReason banTitle banMessage banMessageContent\n          { markdown richtext html } isEmailRequiredForQuarantineOptin quarantineMessage { markdown\n          richtext html typeHint } interstitialWarningMessage { markdown richtext }\n          isContributorRequestsDisabled }",
    },
    SubredditsPickerInfoByIds: {
        id: "bca4439de753",
        operation: "query SubredditsPickerInfoByIds($ids: [String!]!) { subredditsInfoByIds(ids:\n          $ids) { __typename ...subredditPickerInfo } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditPickerInfo on Subreddit\n          { id name title type subscribersCount activeCount isSubscribed isFavorite isNsfw\n          isTitleSafe isQuarantined isUserBanned isThumbnailsEnabled allowedPostTypes\n          publicDescriptionText styles { icon legacyIcon { __typename ...mediaSourceFragment } }\n          modPermissions { isAccessEnabled } submitText rules { name content { richtext } } powerups\n          { benefits } }",
    },
    SubscribedSubreddits: {
        id: "771a8ec48257",
        operation: "query SubscribedSubreddits($before: String, $after: String, $first: Int,\n          $last: Int, $afterFollowing: String) { identity { subscribedSubreddits(before:\n          $before, after: $after, first: $first, last: $last) { edges { node\n          { __typename ...subredditDataDetailsFragment } } pageInfo { hasNextPage hasPreviousPage\n          startCursor endCursor } } followedRedditorsInfo(before: $before, after:\n          $afterFollowing, first: $first, last: $last) { edges { node { __typename\n          ... on Redditor { profile { __typename ...profileDetailsFragment } } } } pageInfo {\n          hasNextPage hasPreviousPage startCursor endCursor } } } }  fragment\n          subredditDataDetailsFragment on Subreddit { id name prefixedName styles { legacyIcon { url\n          } legacyPrimaryColor legacyBannerBackgroundImage primaryColor icon bannerBackgroundImage\n          mobileBannerImage } title description { markdown richtext } publicDescriptionText\n          subscribersCount activeCount createdAt type path isNsfw wikiEditMode whitelistStatus\n          isPostingRestricted isQuarantined quarantineMessage { markdown richtext }\n          interstitialWarningMessage { markdown richtext } allowedPostTypes\n          isChatPostCreationAllowed isChatPostFeatureEnabled isSpoilerAvailable isPredictionAllowed\n          isUserBanned isContributor modPermissions { isAllAllowed isAccessEnabled\n          isConfigEditingAllowed isFlairEditingAllowed isMailEditingAllowed isPostEditingAllowed\n          isWikiEditingAllowed isChatConfigEditingAllowed isChatOperator isChannelsEditingAllowed\n          isCommunityChatEditingAllowed } isSubscribed isFavorite notificationLevel\n          authorFlairSettings { isEnabled isSelfAssignable isOwnFlairEnabled } authorFlair {\n          template { id backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          originalContentCategories predictionLeaderboardEntryType isPredictionsTournamentAllowed\n          isTitleSafe isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled\n          }  fragment profileDetailsFragment on Profile { redditorInfo { __typename ... on Redditor\n          { prefixedName } } id name styles { legacyIcon { url } legacyPrimaryColor\n          legacyBannerBackgroundImage icon } title description { markdown richtext }\n          publicDescriptionText subscribersCount activeCount createdAt path isNsfw whitelistStatus\n          isQuarantined allowedPostTypes isChatPostCreationAllowed isChatPostFeatureEnabled\n          isSpoilerAvailable isPredictionAllowed isUserBanned isContributor modPermissions {\n          isAllAllowed isAccessEnabled isConfigEditingAllowed isFlairEditingAllowed\n          isMailEditingAllowed isPostEditingAllowed isWikiEditingAllowed isChatConfigEditingAllowed\n          isChatOperator isChannelsEditingAllowed isCommunityChatEditingAllowed } isSubscribed\n          isFavorite authorFlairSettings { isEnabled isSelfAssignable } authorFlair { template { id\n          backgroundColor textColor text richtext } } postFlairSettings { isEnabled }\n          predictionLeaderboardEntryType isPredictionsTournamentAllowed }",
    },
    SubscribedSubredditsCount: {
        id: "71e6be5d8076",
        operation: "query SubscribedSubredditsCount($before: String, $after: String, $first:\n          Int, $last: Int) { identity { subscribedSubreddits(before: $before, after:\n          $after, first: $first, last: $last) { edges { node { __typename } } } }\n          }",
    },
    SubscribedSubredditsIsChatAvailable: {
        id: "23bc597bb2dc",
        operation: "query SubscribedSubredditsIsChatAvailable { identity { subscribedSubreddits { edges { node\n          { __typename ... on Subreddit { id isSubredditChannelsEnabled { isPublicChatAvailable } }\n          } } } } }",
    },
    TopSubreddits: {
        id: "b8050f1d83bd",
        operation: "query TopSubreddits($categoryId: ID, $first: Int, $after: String,\n          $isOnlyModIncluded: Boolean) { subredditLeaderboard(categoryId: $categoryId,\n          first: $first, after: $after, isOnlyModIncluded: $isOnlyModIncluded) {\n          edges { cursor id node { __typename ...subredditDataFragment publicDescriptionText styles\n          { bannerBackgroundImage } } rank rankDelta } pageInfo { hasNextPage hasPreviousPage\n          startCursor endCursor } } }  fragment mediaSourceFragment on MediaSource { url dimensions\n          { width height } }  fragment subredditDataFragment on Subreddit { id name prefixedName\n          isQuarantined title type subscribersCount isNsfw isSubscribed isThumbnailsEnabled\n          isFavorite path styles { icon legacyIcon { __typename ...mediaSourceFragment }\n          primaryColor bannerBackgroundImage legacyBannerBackgroundImage legacyPrimaryColor }\n          modPermissions { isAccessEnabled } isTitleSafe isUserBanned isMediaInCommentsSettingShown\n          allowedMediaInComments myRedditSettings { isEnabled } isMuted isChannelsEnabled }",
    },
    UpdateSubredditChannel: {
        id: "5a49f26168eb",
        operation: "mutation UpdateSubredditChannel($input: UpdateSubredditChannelInput!) {\n          updateSubredditChannel(input: $input) { ok errors { message code } } }",
    },
    UpdateSubredditCountrySiteSettings: {
        id: "d35e863e9a4c",
        operation: "mutation UpdateSubredditCountrySiteSettings($input:\n          UpdateSubredditCountrySiteSettingsInput!) { updateSubredditCountrySiteSettings(input:\n          $input) { ok errors { message } subreddit { __typename ... on Subreddit {\n          countrySiteSettings { countryCode languageCode isCountrySiteEditable modMigrationAt } } }\n          } }",
    },
    UpdateSubredditFavoriteState: {
        id: "55af0486d9c4",
        operation: "mutation UpdateSubredditFavoriteState($input: UpdateSubredditFavoriteStateInput!) {\n          updateSubredditFavoriteState(input: $input) { ok errors { message } } }",
    },
    UpdateSubredditPrimaryTag: {
        id: "8d7d4465445d",
        operation: "mutation UpdateSubredditPrimaryTag($input: UpdateSubredditTaggingStatesInput!) {\n          updateSubredditTagStates(input: $input) { ok errors { message } } }",
    },
    UpdateSubredditSettings: {
        id: "f994425a0bf1",
        operation: "mutation UpdateSubredditSettings($input: UpdateSubredditSettingsInput!) {\n          updateSubredditSettings(input: $input) { ok errors { message } fieldErrors { field\n          message } subreddit { __typename ... on Subreddit { __typename ...subredditFragment } } }\n          }  fragment mediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }",
    },
    UpdateSubredditSubscriptions: {
        id: "f528f5ed1fe2",
        operation: "mutation UpdateSubredditSubscriptions($input: UpdateSubredditSubscriptionsInput!) {\n          updateSubredditSubscriptions(input: $input) { ok errors { message } payloads {\n          __typename ... on UpdateSubredditSubscriptionPayload { subreddit { id name } state ok } }\n          } }",
    },
    UserSubredditListItems: {
        id: "6e7c765c9971",
        operation: "query UserSubredditListItems($fetchSubscribed: Boolean!, $subscribedAfter:\n          String, $fetchFollowed: Boolean!, $followedAfter: String,\n          $fetchModerated: Boolean!, $moderatedAfter: String, $limit: Int) {\n          identity { subscribedSubreddits(after: $subscribedAfter, first: $limit)\n          @include(if: $fetchSubscribed) { edges { node { __typename\n          ...subredditListItemFragment } } pageInfo { __typename ...pageInfoFragment } }\n          followedRedditorsInfo(after: $followedAfter, first: $limit) @include(if:\n          $fetchFollowed) { edges { node { __typename ... on Redditor { profile { __typename\n          ...profileListItemFragment } } } } pageInfo { __typename ...pageInfoFragment } } redditor\n          @include(if: $fetchModerated) { moderatedSubreddits(after: $moderatedAfter,\n          first: $limit) { edges { node { __typename ...subredditListItemFragment } } pageInfo\n          { __typename ...pageInfoFragment } } } } }  fragment subredditListItemFragment on\n          Subreddit { id name prefixedName styles { legacyIcon { url } legacyPrimaryColor\n          primaryColor icon } isFavorite isSubscribed isNsfw type modPermissions { __typename } } \n          fragment pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment\n          profileListItemFragment on Profile { redditorInfo { __typename ... on Redditor {\n          prefixedName } } id name styles { legacyIcon { url } legacyPrimaryColor icon }\n          isSubscribed isFavorite isNsfw }",
    },
    ValidateCreateSubreddit: {
        id: "f47a8566fb4b",
        operation: "query ValidateCreateSubreddit($input: CreateSubredditValidationInput!) {\n          validateCreateSubredditInput(input: $input) { fieldErrors { field message code } }\n          }",
    },
    AvailableAwards: {
        id: "de6e947bfacc",
        operation: "query AvailableAwards($subredditId: ID!, $subTypes: [ID!]) {\n          availableAwards(subredditId: $subredditId, subTypes: $subTypes) { __typename\n          ...awardFragment ...awardDetailsFragment } }  fragment mediaSourceFragment on MediaSource\n          { url dimensions { width height } }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }",
    },
    ConversationFeedSdui: {
        id: "1d9ea7e6cb6e",
        operation: "query ConversationFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $sort: PostFeedSort, $time: PostFeedRange, $after:\n          String, $includeViewCount: Boolean = false ) { conversationFeed(adContext:\n          $adContextInput, feedContext: $feedContextInput) { elements(sort: $sort,\n          time: $time, after: $after) { dist pageInfo { endCursor } edges { __typename\n          ...FeedElementEdgeFragment } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl\n          ctaMediaColor promoLayout adInstanceId domain isCreatedFromAdsUi callToAction impressionId\n          isBlankAd isSurveyAd isInAppBrowserOverride isVideo adLinkUrl adEvents { type url }\n          appStoreData { appName appIcon category downloadCount appRating } gallery { caption\n          outboundUrl displayAddress callToAction adEvents { type url } } campaign { id } formatData\n          { id leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    BanSubredditUser: {
        id: "78c428b37ee9",
        operation: "mutation BanSubredditUser($input: BanSubredditUserInput!) { banSubredditUser(input:\n          $input) { ok errors { message } } }",
    },
    GetRealUsername: {
        id: "47f38dcacbab",
        operation: "query GetRealUsername { identity { redditor { name } } }",
    },
    CreateModUserNote: {
        id: "83764c354326",
        operation: "mutation CreateModUserNote($input: CreateModUserNoteInput!,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { createModUserNote(input: $input) { ok\n          createdNote { __typename ...ModNote } errors { message } } }  fragment mediaSourceFragment\n          on MediaSource { url dimensions { width height } }  fragment imageAssetFragment on\n          ImageAsset { __typename id status mimetype width height url small: preview(maxWidth: 108)\n          { __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }  fragment\n          commentFragment on Comment { id createdAt editedAt isAdminTakedown isRemoved parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }  fragment ModNote on ModNoteItem { __typename id\n          createdAt itemType operator { id displayName } user { id displayName } ... on ModUserNote\n          { label note } ... on ModUserNotePost { label note postInfo { __typename ...postFragment }\n          } ... on ModUserNoteComment { label note commentInfo { __typename ...commentFragment\n          postInfo { __typename ...postFragment } } } ... on ModActionNote { actionType banDays\n          isPermanentBan banReason description } ... on ModActionNotePost { actionType banDays\n          isPermanentBan banReason description postInfo { __typename ...postFragment } } ... on\n          ModActionNoteComment { actionType banDays isPermanentBan banReason description commentInfo\n          { __typename ...commentFragment postInfo { __typename ...postFragment } } } }",
    },
    DeleteModUserLog: {
        id: "0de40088a1fe",
        operation: "mutation DeleteModUserLog($input: DeleteModUserNoteInput!) { deleteModUserNote(input:\n          $input) { ok errors { message } } }",
    },
    GetModUserLogs: {
        id: "15eaa70a00ff",
        operation: "query GetModUserLogs($subredditId: ID!, $userId: ID!, $filter:\n          ModNoteFilter!, $before: String, $last: Int, $includeSubredditInPosts:\n          Boolean = true , $includeAwards: Boolean = true , $feedContext:\n          FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { subredditInfoById(id: $subredditId) {\n          __typename ... on Subreddit { modNotes(userId: $userId, filter: $filter,\n          before: $before, last: $last) { pageInfo { startCursor endCursor hasNextPage\n          hasPreviousPage } edges { cursor node { __typename ...ModNote } } totalCount } } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          imageAssetFragment on ImageAsset { __typename id status mimetype width height url small:\n          preview(maxWidth: 108) { __typename ...mediaSourceFragment } medium: preview(maxWidth:\n          216) { __typename ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename\n          ...mediaSourceFragment } xlarge: preview(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: preview(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: preview(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_medium: preview(maxWidth: 216, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_large: preview(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_xlarge:\n          preview(maxWidth: 640, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_xxlarge: preview(maxWidth: 960, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080, obfuscate: true) {\n          __typename ...mediaSourceFragment } }  fragment avatarExpressionMediaAssetFragment on\n          MediaAsset { __typename ... on ExpressionMediaAsset { avatar { id fullImage { url } }\n          expression { id name assets { image { url } layer } size position perspective } } } \n          fragment mediaAssetFragment on MediaAsset { __typename id userId mimetype width height ...\n          on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }  fragment\n          commentFragment on Comment { id createdAt editedAt isAdminTakedown isRemoved parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }  fragment ModNote on ModNoteItem { __typename id\n          createdAt itemType operator { id displayName } user { id displayName } ... on ModUserNote\n          { label note } ... on ModUserNotePost { label note postInfo { __typename ...postFragment }\n          } ... on ModUserNoteComment { label note commentInfo { __typename ...commentFragment\n          postInfo { __typename ...postFragment } } } ... on ModActionNote { actionType banDays\n          isPermanentBan banReason description } ... on ModActionNotePost { actionType banDays\n          isPermanentBan banReason description postInfo { __typename ...postFragment } } ... on\n          ModActionNoteComment { actionType banDays isPermanentBan banReason description commentInfo\n          { __typename ...commentFragment postInfo { __typename ...postFragment } } } }",
    },
    GetModUserLogsCounts: {
        id: "14225447d2dc",
        operation: "query GetModUserLogsCounts($subredditId: ID!, $userId: ID!) {\n          subredditInfoById(id: $subredditId) { __typename ... on Subreddit { all:\n          modNotes(filter: ALL, userId: $userId) { totalCount } note: modNotes(filter: NOTE,\n          userId: $userId) { totalCount } approval: modNotes(filter: APPROVAL, userId:\n          $userId) { totalCount } removal: modNotes(filter: REMOVAL, userId: $userId) {\n          totalCount } ban: modNotes(filter: BAN, userId: $userId) { totalCount } mute:\n          modNotes(filter: MUTE, userId: $userId) { totalCount } invite: modNotes(filter:\n          INVITE, userId: $userId) { totalCount } spam: modNotes(filter: SPAM, userId:\n          $userId) { totalCount } contentChange: modNotes(filter: CONTENT_CHANGE, userId:\n          $userId) { totalCount } modAction: modNotes(filter: MOD_ACTION, userId:\n          $userId) { totalCount } } } }",
    },
    GetModUserRecentNoteAndTotalCount: {
        id: "65fc19582f47",
        operation: "query GetModUserRecentNoteAndTotalCount($subredditId: ID!, $userId: ID!,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { subredditInfoById(id: $subredditId) {\n          __typename ... on Subreddit { recentNote: modNotes(userId: $userId, filter: NOTE,\n          last: 1) { edges { node { __typename ...ModNote } } } allCount: modNotes(userId:\n          $userId, filter: ALL) { totalCount } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          proxyAuthorInfoFragment on ModerationInfo { proxyAuthor { id displayName } }  fragment\n          commentFragment on Comment { id createdAt editedAt isAdminTakedown isRemoved parent { id }\n          postInfo { __typename id title ... on SubredditPost { subreddit { id name prefixedName } }\n          ... on ProfilePost { profile { redditorInfo { __typename ...redditorNameFragment } } } }\n          isLocked isInitiallyCollapsed initiallyCollapsedReason content { __typename markdown html\n          richtext typeHint ...richtextMediaFragment } authorInfo { __typename ...authorInfoFragment\n          } score voteState authorFlair { __typename ...authorFlairFragment } isSaved isStickied\n          isScoreHidden awardings @include(if: $includeAwards) { __typename\n          ...awardingTotalFragment } associatedAward { __typename ...awardFragment } treatmentTags\n          isArchived distinguishedAs permalink moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment ...proxyAuthorInfoFragment ... on\n          CommentModerationInfo { isAutoCollapsedFromCrowdControl } verdict verdictAt banReason\n          verdictByRedditorInfo { __typename ...redditorNameFragment } reportCount isRemoved\n          ...lastAuthorModNoteFragment } }  fragment ModNote on ModNoteItem { __typename id\n          createdAt itemType operator { id displayName } user { id displayName } ... on ModUserNote\n          { label note } ... on ModUserNotePost { label note postInfo { __typename ...postFragment }\n          } ... on ModUserNoteComment { label note commentInfo { __typename ...commentFragment\n          postInfo { __typename ...postFragment } } } ... on ModActionNote { actionType banDays\n          isPermanentBan banReason description } ... on ModActionNotePost { actionType banDays\n          isPermanentBan banReason description postInfo { __typename ...postFragment } } ... on\n          ModActionNoteComment { actionType banDays isPermanentBan banReason description commentInfo\n          { __typename ...commentFragment postInfo { __typename ...postFragment } } } }",
    },
    AwardingInfosByIds: {
        id: "59dac1a2900f",
        operation: "query AwardingInfosByIds($ids: [ID!]!) { awardingsByIds(ids: $ids) { id award {\n          id } target { id } awarderInfo { __typename ...redditorNameFragment } isAnonymous } } \n          fragment redditorNameFragment on RedditorInfo { __typename ... on Redditor { id name\n          prefixedName } ... on UnavailableRedditor { id name } ... on DeletedRedditor { id name }\n          }",
    },
    AwardingTotalsForComment: {
        id: "77ac6bc8a4db",
        operation: "query AwardingTotalsForComment($id: ID!) { comment(id: $id) { __typename ... on\n          Comment { awardings { __typename ...awardingTotalFragment award { __typename\n          ...awardFragment ...awardDetailsFragment } } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }",
    },
    AwardingTotalsForPost: {
        id: "2e9848df6051",
        operation: "query AwardingTotalsForPost($id: ID!) { postInfoById(id: $id) { awardings {\n          __typename ...awardingTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment groupAwardFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }",
    },
    BlockAwarderByAwardingId: {
        id: "45affb30d5a6",
        operation: "mutation BlockAwarderByAwardingId($awardingId: ID!) { blockAwarder(input: {\n          awardingId: $awardingId } ) { ok } }",
    },
    GetTippingStatus: {
        id: "0b709d2f679e",
        operation: "query GetTippingStatus($subredditId: ID!) { subredditInfoById(id: $subredditId)\n          { __typename ... on Subreddit { id tippingStatus { isEnabled } } } }",
    },
    GildComment: {
        id: "7d84e73ff03f",
        operation: "mutation GildComment($input: GildInput!) { gild: gildComment(input: $input) {\n          ok coins awardKarmaReceived comment { __typename ... on Comment { treatmentTags awardings\n          { __typename ...awardingTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } } errors { message } fieldErrors { field message } } } \n          fragment mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingTotalFragment on AwardingTotal { award { __typename ...awardFragment } total } \n          fragment groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat\n          icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth:\n          128) { __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }",
    },
    GildPost: {
        id: "2e00b1233cbb",
        operation: "mutation GildPost($input: GildInput!) { gild: gildPost(input: $input) { ok\n          coins awardKarmaReceived awardings { __typename ...awardingTotalFragment award {\n          __typename ...awardFragment ...awardDetailsFragment } } errors { message } fieldErrors {\n          field message } } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment groupAwardFragment on Award { tiers { awardId awardingsRequired\n          iconFormat icon_16: icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24:\n          icon(maxWidth: 24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) {\n          __typename ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment }\n          staticIcon_16: staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment }\n          staticIcon_24: staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          staticIcon_32: staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          staticIcon_48: staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          staticIcon_64: staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment }\n          staticIcon_96: staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } } \n          fragment awardFragment on Award { __typename id name awardType awardSubType iconFormat\n          icon_16: icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth:\n          24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } coinPrice\n          ...groupAwardFragment }  fragment awardingTotalFragment on AwardingTotal { award {\n          __typename ...awardFragment } total }  fragment groupAwardDetailsFragment on Award { tiers\n          { awardId awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }",
    },
    GiveAward: {
        id: "2c3917fe9831",
        operation: "mutation GiveAward($input: GiveAwardInput!) { giveAward(input: $input) { ok\n          errors { message } awarding { target { __typename ... on PostInfo { awardings { __typename\n          ...awardingByCurrentUserTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } ... on Comment { treatmentTags awardings { __typename\n          ...awardingByCurrentUserTotalFragment award { __typename ...awardFragment\n          ...awardDetailsFragment } } } } } receivedKarma } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingByCurrentUserTotalFragment on AwardingTotal { award { __typename ...awardFragment\n          } awardingByCurrentUser { id } total }  fragment groupAwardDetailsFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }",
    },
    HideAwardOnTarget: {
        id: "bdd216470ca0",
        operation: "mutation HideAwardOnTarget($targetId: ID!, $awardId: ID!) {\n          hideAwardOnTarget(input: { targetId: $targetId awardId: $awardId } ) { ok }\n          }",
    },
    RemoveAward: {
        id: "84e27c5bc080",
        operation: "mutation RemoveAward($input: RemoveAwardInput!) { removeAward(input: $input) {\n          ok errors { message } } }",
    },
    SortedUsableAwardsForProfile: {
        id: "c1eb777fc518",
        operation: "query SortedUsableAwardsForProfile($name: String!, $nodeId: ID!,\n          $includeGroup: Boolean, $isSuperchatEnabled: Boolean) { profileByName(name:\n          $name) { __typename ... on Profile { sortedUsableAwards(nodeId: $nodeId,\n          includeGroup: $includeGroup, isSuperchatEnabled: $isSuperchatEnabled) {\n          __typename ...awardingTotalDetailsFragment } awardingTray { __typename\n          ...awardingTrayFragment } moderation { coins } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment groupAwardFragment on Award {\n          tiers { awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment awardingTotalDetailsFragment on AwardingTotal { award { __typename\n          ...awardFragment ...awardDetailsFragment } total }  fragment awardingTrayFragment on\n          AwardingTray { sortedUsableTags { tag content { markdown } } }",
    },
    SortedUsableAwardsWithTags: {
        id: "5b7ad8022c67",
        operation: "query SortedUsableAwardsWithTags($subredditId: ID!, $nodeId: ID!,\n          $includeGroup: Boolean, $isSuperchatEnabled: Boolean) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { sortedUsableAwards(nodeId:\n          $nodeId, includeGroup: $includeGroup, isSuperchatEnabled:\n          $isSuperchatEnabled) { __typename ...awardingTotalDetailsFragment } awardingTray {\n          __typename ...awardingTrayFragment } moderation { coins } } } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment awardingTotalDetailsFragment on AwardingTotal { award { __typename\n          ...awardFragment ...awardDetailsFragment } total }  fragment awardingTrayFragment on\n          AwardingTray { sortedUsableTags { tag content { markdown } } }",
    },
    TippingProductOffers: {
        id: "2fd407e8900b",
        operation: "query TippingProductOffers { globalProductOffers(productTypes: [\"tipping\"]) { offers { id\n          version type name description tags pricePackages { id externalProductId price currency\n          requiredPaymentProviders skus { __typename ... on TippingSku { name kind gold } } images {\n          name image { url dimensions { height width } } } } } } }",
    },
    IdentityMatrixNotifications: {
        id: "65461f0ade9a",
        operation: "query IdentityMatrixNotifications { identity { matrixNotifications { unreadCount } } }",
    },
    SearchChatMessageReactionIcons: {
        id: "64aadd138e4c",
        operation: "query SearchChatMessageReactionIcons($query: String!, $first: Int) {\n          searchChatMessageReactionIcons(query: $query, first: $first) { edges { node {\n          url key altText matrixUrl } } } }",
    },
    GetNavbarEntryPoint: {
        id: "d74637caafd9",
        operation: "query GetNavbarEntryPoint { navBarEventEntryPoint { eventKey tooltip icon { url } } }",
    },
    GetNavBarEventCommunityPicker: {
        id: "c706b8930440",
        operation: "query GetNavBarEventCommunityPicker($eventKey: ID!) {\n          navBarEventCommunityPicker(eventKey: $eventKey) { title subtitle icon { url }\n          communities { name description icon { url } subreddit { id name publicDescriptionText\n          isSubscribed styles { icon primaryColor } } } } }",
    },
    GetChatContentControlSettings: {
        id: "4e3f508c0339",
        operation: "query GetChatContentControlSettings($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { channelSettings {\n          contentControlSettings { allowedDomains blockedContent blockedDomains blockedContentRegex\n          domainFilterType } } } } }",
    },
    SetChatContentControlSettings: {
        id: "5a16ef60bc81",
        operation: "mutation SetChatContentControlSettings($subredditId: ID!,\n          $contentControlSettings: ContentControlSettingsInput) {\n          updateSubredditChannelsSettings(input: { subredditId: $subredditId\n          contentControlSettings: $contentControlSettings } ) { ok errors { code } } }",
    },
    GetNotificationSettingsLayoutByChannel: {
        id: "4c12c50d29cb",
        operation: "query GetNotificationSettingsLayoutByChannel($channel:\n          NotificationSettingsLayoutChannel!) { notificationSettingsLayoutByChannel(channel:\n          $channel) { sections { id title rows { __typename displayName icon ... on\n          NotificationSettingsLayoutMessageTypeRow { messageType isEnabled } } } } }",
    },
    GetSubredditNotificationSettings: {
        id: "fb492e278cec",
        operation: "query GetSubredditNotificationSettings($ids: [String!]!) { subredditsInfoByIds(ids:\n          $ids) { __typename id ... on Subreddit { notificationSettings {\n          isModeratedSrEngagementPnEnabled isModeratedSrMilestonePnEnabled\n          isModeratedSrContentFoundationPnEnabled } } } }",
    },
    RegisterMobilePushToken: {
        id: "226539052c0a",
        operation: "mutation RegisterMobilePushToken($authTokens: [String!]!, $pushToken: String!,\n          $deviceId: String!, $timezoneName: String!, $timestamp: DateTime!,\n          $language: String!) { registerMobilePushToken(input: { authTokens: $authTokens\n          pushToken: $pushToken deviceId: $deviceId timezoneName: $timezoneName\n          timestamp: $timestamp language: $language } ) { ok } }",
    },
    UpdateNotificationPreferences: {
        id: "09be7c8ca761",
        operation: "mutation UpdateNotificationPreferences($input: UpdateNotificationPreferencesInput!) {\n          updateNotificationPreferences(input: $input) { ok errors { message } } }",
    },
    UpdateSubredditNotificationSettings: {
        id: "514b44cef040",
        operation: "mutation UpdateSubredditNotificationSettings($input:\n          UpdateSubredditNotificationSettingsInput!) { updateSubredditNotificationSettings(input:\n          $input) { ok errors { message } } }",
    },
    GetModActionCategories: {
        id: "d71e3456f290",
        operation: "query GetModActionCategories { moderationActionCategories { actions category } }",
    },
    GetModLog: {
        id: "27d3f1b7ca2b",
        operation: "query GetModLog($subredditId: ID!, $before: String, $after: String,\n          $first: Int, $last: Int, $filterActions: [ModActionType!],\n          $filterActionCategories: [ModActionCategory!], $filterModeratorNames:\n          [String!]) { subredditInfoById(id: $subredditId) { __typename ... on Subreddit {\n          moderation { modActions: actions(actions: $filterActions, actionCategories:\n          $filterActionCategories, moderatorNames: $filterModeratorNames, before:\n          $before, after: $after, first: $first, last: $last) { pageInfo {\n          hasNextPage hasPreviousPage startCursor endCursor } edges { node { id createdAt action\n          actionCategory actionNotes details deletedContent { markdown } moderatorInfo { id\n          displayName } takedownContentPreview { title body violatedContentPolicyRule }\n          subredditName target { __typename ... on Subreddit { id name } ... on Redditor { id\n          displayName } ... on DeletedRedditor { id displayName } ... on UnavailableRedditor { id\n          displayName } ... on SubredditPost { id title authorInfo { id displayName } content {\n          markdown } } ... on DeletedSubredditPost { id title } ... on Comment { id authorInfo { id\n          displayName } postInfo { id title } content { markdown } } ... on DeletedComment { id\n          postInfo { id title } } } } } } } } } }",
    },
    GetDevPlatformMetadata: {
        id: "2c5e67614c6b",
        operation: "query GetDevPlatformMetadata($subredditId: ID!, $mimetype: String!) {\n          subredditInfoById(id: $subredditId) { __typename ... on Subreddit {\n          devPlatformMetadata(mimetype: $mimetype) } } }",
    },
    CreateRemovalReason: {
        id: "52ec45383096",
        operation: "mutation CreateRemovalReason($input: CreateRemovalReasonInput!) {\n          createRemovalReason(input: $input) { ok removalReason { __typename ...RemovalReason\n          } errors { message } } }  fragment RemovalReason on RemovalReason { id title message }",
    },
    DeleteRemovalReason: {
        id: "605e370918f0",
        operation: "mutation DeleteRemovalReason($input: DeleteRemovalReasonInput!) {\n          deleteRemovalReason(input: $input) { ok errors { message } } }",
    },
    GetRemovalReasons: {
        id: "c19a5eab841e",
        operation: "query GetRemovalReasons($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { removalReasons { __typename\n          ...RemovalReason } } } }  fragment RemovalReason on RemovalReason { id title message }",
    },
    UpdateRemovalReason: {
        id: "f49ca6da7bdc",
        operation: "mutation UpdateRemovalReason($input: UpdateRemovalReasonInput!) {\n          updateRemovalReason(input: $input) { ok removalReason { __typename ...RemovalReason\n          } errors { message } } }  fragment RemovalReason on RemovalReason { id title message }",
    },
    ClaimAwardOffer: {
        id: "3fc3c9d9b246",
        operation: "mutation ClaimAwardOffer($input: ClaimAwardOfferInput!) { claimAwardOffer(input:\n          $input) { ok awards { __typename ...awardDetailsFragment ...awardFragment }\n          nextStartsAt } }  fragment mediaSourceFragment on MediaSource { url dimensions { width\n          height } }  fragment groupAwardDetailsFragment on Award { tiers { awardId\n          awardingsRequired iconFormat icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } staticIcon_128:\n          staticIcon(maxWidth: 128) { __typename ...mediaSourceFragment } staticIcon_144:\n          staticIcon(maxWidth: 144) { __typename ...mediaSourceFragment } staticIcon_172:\n          staticIcon(maxWidth: 172) { __typename ...mediaSourceFragment } staticIcon_192:\n          staticIcon(maxWidth: 192) { __typename ...mediaSourceFragment } staticIcon_256:\n          staticIcon(maxWidth: 256) { __typename ...mediaSourceFragment } staticIcon_288:\n          staticIcon(maxWidth: 288) { __typename ...mediaSourceFragment } staticIcon_384:\n          staticIcon(maxWidth: 384) { __typename ...mediaSourceFragment } } }  fragment\n          awardDetailsFragment on Award { __typename isEnabled isNew coinPrice daysOfPremium\n          description startsAt endsAt tags stickyDurationSeconds iconFormat\n          ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_172:\n          icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename ...mediaSourceFragment\n          } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }",
    },
    CoinPackOffers: {
        id: "1d9f4ac2ce7f",
        operation: "query CoinPackOffers { globalProductOffers(productTypes: [\"coinpack\",\"premium\"]) { offers {\n          id type name description userSpendingProfile version tags pricePackages { id price\n          currency quantity description baselinePrice bonusPercent requiredPaymentProviders\n          externalProductId tags promos { __typename id promoType name description endsAt ... on\n          CoinSalePromo { heroMobileImage { url } heroText heroSubText ctaText } ... on\n          CoinDealPromo { dealType } } images { name image { url dimensions { width height } } }\n          skus { __typename kind ... on CoinsSku { name description coins coinsReceiver\n          baselineCoins bonusPercent } ... on CoinsDripSku { name description coins duration {\n          __typename ...durationFragment } } } } } } }  fragment durationFragment on Duration {\n          amount unit }",
    },
    CreateCoinsOrder: {
        id: "54fc60352f33",
        operation: "mutation CreateCoinsOrder($nonce: String!, $productId: ID!,\n          $productVersion: Int!, $price: String!, $pricePackageId: ID!,\n          $currency: Currency!, $count: String!, $subredditId: ID!) {\n          createEconOrder(input: { nonce: $nonce productId: $productId productVersion:\n          $productVersion price: $price pricePackageId: $pricePackageId currency:\n          $currency productsCount: $count subredditId: $subredditId\n          userCoinsInSubreddit: { subredditId: $subredditId }  } ) { ok order { id status } }\n          }",
    },
    EconSpecialEventsWithFreeAwards: {
        id: "798a6ab98550",
        operation: "query EconSpecialEventsWithFreeAwards { econSpecialEvents { __typename\n          ...econSpecialEventsFragment } freeAwards { awards { __typename ...awardFragment\n          ...awardDetailsFragment subreddit { id } } } }  fragment econSpecialEventsFragment on\n          EconSpecialEvents { freeAwardEvent { isEnabled startsAt } coinSale { ctaText } }  fragment\n          mediaSourceFragment on MediaSource { url dimensions { width height } }  fragment\n          groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat icon_16:\n          icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          groupAwardDetailsFragment on Award { tiers { awardId awardingsRequired iconFormat icon_96:\n          icon(maxWidth: 96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) {\n          __typename ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256:\n          icon(maxWidth: 256) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } staticIcon_128: staticIcon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } staticIcon_144: staticIcon(maxWidth: 144) { __typename\n          ...mediaSourceFragment } staticIcon_172: staticIcon(maxWidth: 172) { __typename\n          ...mediaSourceFragment } staticIcon_192: staticIcon(maxWidth: 192) { __typename\n          ...mediaSourceFragment } staticIcon_256: staticIcon(maxWidth: 256) { __typename\n          ...mediaSourceFragment } staticIcon_288: staticIcon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } staticIcon_384: staticIcon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } } }  fragment awardDetailsFragment on Award { __typename\n          isEnabled isNew coinPrice daysOfPremium description startsAt endsAt tags\n          stickyDurationSeconds iconFormat ...groupAwardDetailsFragment icon_96: icon(maxWidth: 96)\n          { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_172: icon(maxWidth: 172) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_256: icon(maxWidth: 256) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }",
    },
    UserCoinsInSubredditProducts: {
        id: "e301fd50ddf2",
        operation: "query UserCoinsInSubredditProducts($subreddit: ID!) { subredditInfoById(id:\n          $subreddit) { __typename ... on Subreddit { productOffers(productTypes:\n          [\"user-coins-in-subreddit\"], includeGlobal: false) { offers { id version pricePackages {\n          id price currency } } } } } }",
    },
    GetModCardInfo: {
        id: "d0f5d51f0b53",
        operation: "query GetModCardInfo($subredditId: ID!, $redditorId: ID!,\n          $redditorUsername: String!) { subredditInfoById(id: $subredditId) { __typename\n          ... on Subreddit { modPermissions { isAllAllowed isAccessEnabled isMailEditingAllowed\n          isFlairEditingAllowed } authorFlairSettings { isEnabled isSelfAssignable } userMuted:\n          mutedMembers(username: $redditorUsername) { pageInfo { startCursor } } userBanned:\n          bannedMembers(username: $redditorUsername) { pageInfo { startCursor } }\n          userIsModerator: moderatorMembers(username: $redditorUsername) { pageInfo {\n          startCursor } } userIsApproved: contributorMembers(username: $redditorUsername) {\n          pageInfo { startCursor } } } } redditorInfoById(id: $redditorId) { __typename ... on\n          Redditor { displayName prefixedName cakeDayOn isBlocked isAcceptingChats icon { url }\n          karma { fromPosts fromComments } } } }",
    },
    GetRelatedCommunityRecommendations: {
        id: "2fafcf8b8744",
        operation: "query GetRelatedCommunityRecommendations($subredditId: ID!) {\n          relatedCommunityRecommendations(subredditId: $subredditId) { modelVersion\n          recommendations { id name title publicDescriptionText subscribersCount activeCount styles\n          { icon legacyIcon { url } } } } }",
    },
    GetCurrentUserNftAvatars: {
        id: "bebd1bc11c94",
        operation: "query GetCurrentUserNftAvatars { avatarBuilderCatalog { outfits { __typename ... on\n          NFTAvatarOutfit { id } } } }",
    },
    GetSubredditExpressions: {
        id: "9012f0f1fcc0",
        operation: "query GetSubredditExpressions($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { avatarExpressions { edges { node { id\n          name assets { image { __typename ...mediaSourceFragment } layer } size position\n          perspective } } } } } }  fragment mediaSourceFragment on MediaSource { url dimensions {\n          width height } }",
    },
    GetGender: {
        id: "c68f89c552f8",
        operation: "query GetGender { piiIdentity { gender { accountDefinedGender accountGenderCategory } }\n          }",
    },
    PendingCommunityInvitations: {
        id: "91954b4abaef",
        operation: "query PendingCommunityInvitations($subredditId: ID) { identity { isInvitePending\n          pendingCommunityInvitations(subredditId: $subredditId) { senderInfo { __typename id\n          ... on Redditor { name } } subredditInfo { id name } chatMessageId type isContributor } }\n          }",
    },
    UpdateProfileFollowState: {
        id: "26b67398cfb6",
        operation: "mutation UpdateProfileFollowState($input: UpdateProfileFollowStateInput!) {\n          updateProfileFollowState(input: $input) { ok errors { code message } } }",
    },
    CommunityChatPermissionLevels: {
        id: "afe25a794f62",
        operation: "query CommunityChatPermissionLevels($subredditId: ID!) {\n          communityChatPermissionLevels(subredditId: $subredditId) { availableLevels { rank\n          name description } currentLevel } }",
    },
    UpdateSubredditChannelsSettings: {
        id: "c021e01db06c",
        operation: "mutation UpdateSubredditChannelsSettings($input:\n          UpdateSubredditChannelsSettingsInput!) { updateSubredditChannelsSettings(input:\n          $input) { ok errors { code } } }",
    },
    EconAvatarMarketingEvents: {
        id: "f2b5c944c9cc",
        operation: "query EconAvatarMarketingEvents { econSpecialEvents { __typename avatarMarketingEvents { id\n          startsAt endsAt name text mobileAssetUrls tags } } identity { createdAt redditor {\n          snoovatarIcon { url } } } }",
    },
    GetAvatarStorefront: {
        id: "8c0dc6d5c30f",
        operation: "query GetAvatarStorefront { avatarStorefront { __typename storefrontStatus\n          ...gqlStorefrontPriceBoundsRoot featured: listings(filter: { theme: FEATURED } , first: 9)\n          { __typename ...gqlStorefrontListings } popular: listings(filter: { theme: POPULAR } ,\n          first: 9) { __typename ...gqlStorefrontListings } gallery: listings(filter: { status:\n          AVAILABLE } , first: 9) { __typename ...gqlStorefrontListings } artists { __typename\n          ...gqlStorefrontArtistsWithListings } } }  fragment gqlStorefrontPriceInfo on\n          StorefrontPriceInfo { price googleExternalProductId }  fragment gqlStorefrontPriceBounds\n          on StorefrontPriceTier { priceLowerBound { __typename ...gqlStorefrontPriceInfo }\n          priceUpperBound { __typename ...gqlStorefrontPriceInfo } }  fragment\n          gqlStorefrontPriceBoundsRoot on AvatarStorefront { prices { __typename\n          ...gqlStorefrontPriceBounds } }  fragment gqlPricePackage on ProductPurchasePackage { id\n          externalProductId requiredPaymentProviders currency price quantity }  fragment\n          gqlStorefrontListing on StorefrontListing { id totalQuantity soldQuantity badges\n          productOffer { pricePackages { __typename ...gqlPricePackage } } status item { id name\n          artist { redditorInfo { id } } benefits { avatarOutfit { id preRenderImage { url }\n          backgroundImage { url } } } } expiresAt }  fragment gqlStorefrontListings on\n          StorefrontListingConnection { pageInfo { startCursor } edges { node { __typename\n          ...gqlStorefrontListing } } }  fragment gqlStorefrontArtist on StorefrontArtist {\n          redditorInfo { __typename id displayName ... on Redditor { name profile { title isNsfw\n          publicDescriptionText } icon { url } snoovatarIcon { url } } } }  fragment\n          gqlStorefrontArtistWithListings on StorefrontArtist { __typename ...gqlStorefrontArtist\n          listings(first: 9) { __typename ...gqlStorefrontListings } }  fragment\n          gqlStorefrontArtistsWithListings on StorefrontArtistConnection { edges { node { __typename\n          ...gqlStorefrontArtistWithListings } } }",
    },
    GetAvatarStorefrontArtistWithListings: {
        id: "6e312c29f59b",
        operation: "query GetAvatarStorefrontArtistWithListings($id: ID!) { avatarStorefront { artist:\n          artists(filter: { ids: [$id] } ) { edges { node { __typename ...gqlStorefrontArtist\n          listings { __typename ...gqlStorefrontListings } } } } } }  fragment gqlStorefrontArtist\n          on StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { name\n          profile { title isNsfw publicDescriptionText } icon { url } snoovatarIcon { url } } } } \n          fragment gqlPricePackage on ProductPurchasePackage { id externalProductId\n          requiredPaymentProviders currency price quantity }  fragment gqlStorefrontListing on\n          StorefrontListing { id totalQuantity soldQuantity badges productOffer { pricePackages {\n          __typename ...gqlPricePackage } } status item { id name artist { redditorInfo { id } }\n          benefits { avatarOutfit { id preRenderImage { url } backgroundImage { url } } } }\n          expiresAt }  fragment gqlStorefrontListings on StorefrontListingConnection { pageInfo {\n          startCursor } edges { node { __typename ...gqlStorefrontListing } } }",
    },
    GetAvatarStorefrontDynamic: {
        id: "bf4c8ac58d1f",
        operation: "query GetAvatarStorefrontDynamic($listingsQueries: [StorefrontBatchListingsQuery!],\n          $artistsQueries: [StorefrontBatchArtistsQuery!]) { avatarStorefront { __typename\n          storefrontStatus ...gqlStorefrontPriceBoundsRoot batchArtists(queries:\n          $artistsQueries) { sectionId artists { __typename\n          ...gqlStorefrontArtistsWithListings } } batchListings(queries: $listingsQueries) {\n          sectionId listings { __typename ...gqlStorefrontListings } } } }  fragment\n          gqlStorefrontPriceInfo on StorefrontPriceInfo { price googleExternalProductId }  fragment\n          gqlStorefrontPriceBounds on StorefrontPriceTier { priceLowerBound { __typename\n          ...gqlStorefrontPriceInfo } priceUpperBound { __typename ...gqlStorefrontPriceInfo } } \n          fragment gqlStorefrontPriceBoundsRoot on AvatarStorefront { prices { __typename\n          ...gqlStorefrontPriceBounds } }  fragment gqlStorefrontArtist on StorefrontArtist {\n          redditorInfo { __typename id displayName ... on Redditor { name profile { title isNsfw\n          publicDescriptionText } icon { url } snoovatarIcon { url } } } }  fragment gqlPricePackage\n          on ProductPurchasePackage { id externalProductId requiredPaymentProviders currency price\n          quantity }  fragment gqlStorefrontListing on StorefrontListing { id totalQuantity\n          soldQuantity badges productOffer { pricePackages { __typename ...gqlPricePackage } }\n          status item { id name artist { redditorInfo { id } } benefits { avatarOutfit { id\n          preRenderImage { url } backgroundImage { url } } } } expiresAt }  fragment\n          gqlStorefrontListings on StorefrontListingConnection { pageInfo { startCursor } edges {\n          node { __typename ...gqlStorefrontListing } } }  fragment gqlStorefrontArtistWithListings\n          on StorefrontArtist { __typename ...gqlStorefrontArtist listings(first: 9) { __typename\n          ...gqlStorefrontListings } }  fragment gqlStorefrontArtistsWithListings on\n          StorefrontArtistConnection { edges { node { __typename ...gqlStorefrontArtistWithListings\n          } } }",
    },
    GetAvatarStorefrontDynamicLayout: {
        id: "d23e676c332f",
        operation: "query GetAvatarStorefrontDynamicLayout { avatarStorefront { layout(platform: ANDROID) {\n          layoutJson } } }",
    },
    GetAvatarStorefrontLegacy: {
        id: "c59285df2128",
        operation: "query GetAvatarStorefrontLegacy($ids: [ID!]) { avatarStorefront { artists(filter: {\n          ids: $ids } ) { edges { node { __typename ...gqlStorefrontArtist } } } listings {\n          edges { node { __typename ...gqlStorefrontListing } } } } }  fragment gqlStorefrontArtist\n          on StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { name\n          profile { title isNsfw publicDescriptionText } icon { url } snoovatarIcon { url } } } } \n          fragment gqlPricePackage on ProductPurchasePackage { id externalProductId\n          requiredPaymentProviders currency price quantity }  fragment gqlStorefrontListing on\n          StorefrontListing { id totalQuantity soldQuantity badges productOffer { pricePackages {\n          __typename ...gqlPricePackage } } status item { id name artist { redditorInfo { id } }\n          benefits { avatarOutfit { id preRenderImage { url } backgroundImage { url } } } }\n          expiresAt }",
    },
    GetFreeBuilderItems: {
        id: "3eb3ff37fc64",
        operation: "query GetFreeBuilderItems { avatarBuilderCatalog { distributionCampaigns {\n          distributionCampaignId name listings { id totalQuantity soldQuantity status item { id name\n          benefits { avatarOutfit { id preRenderImage { url } backgroundImage { url } } } } } } }\n          }",
    },
    GetStorefrontAuthorsOfListings: {
        id: "7073312abcb8",
        operation: "query GetStorefrontAuthorsOfListings($filter: StorefrontListingsFilter) {\n          avatarStorefront { listings(filter: $filter) { edges { node { artist { __typename\n          ...gqlStorefrontArtistReduced } } } } } }  fragment gqlStorefrontArtistReduced on\n          StorefrontArtist { redditorInfo { __typename id displayName ... on Redditor { profile {\n          title isNsfw } icon { url } snoovatarIcon { url } } } }",
    },
    GetStorefrontPaginated: {
        id: "61ade32273d9",
        operation: "query GetStorefrontPaginated($filter: StorefrontListingsFilter, $before:\n          String, $after: String, $first: Int, $sort: StorefrontListingsSort) {\n          avatarStorefront { listings(filter: $filter, before: $before, after:\n          $after, first: $first, sort: $sort) { __typename\n          ...gqlStorefrontListings pageInfo { __typename ...fullPageInfoFragment } } } }  fragment\n          gqlPricePackage on ProductPurchasePackage { id externalProductId requiredPaymentProviders\n          currency price quantity }  fragment gqlStorefrontListing on StorefrontListing { id\n          totalQuantity soldQuantity badges productOffer { pricePackages { __typename\n          ...gqlPricePackage } } status item { id name artist { redditorInfo { id } } benefits {\n          avatarOutfit { id preRenderImage { url } backgroundImage { url } } } } expiresAt } \n          fragment gqlStorefrontListings on StorefrontListingConnection { pageInfo { startCursor }\n          edges { node { __typename ...gqlStorefrontListing } } }  fragment fullPageInfoFragment on\n          PageInfo { hasNextPage hasPreviousPage startCursor endCursor }",
    },
    NewsFeedSdui: {
        id: "e23859d90c12",
        operation: "query NewsFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $subtopicIds: [ID!], $filterPosts: [ID!],\n          $navigationSessionId: ID, $sort: PostFeedSort, $time: PostFeedRange,\n          $after: String, $includeViewCount: Boolean = false ) { newsV3(adContext:\n          $adContextInput, feedContext: $feedContextInput, subtopicIds:\n          $subtopicIds, filterPosts: $filterPosts, navigationSessionId:\n          $navigationSessionId) { elements(sort: $sort, time: $time, after:\n          $after) { dist pageInfo { endCursor } edges { __typename ...FeedElementEdgeFragment\n          } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl ctaMediaColor promoLayout\n          adInstanceId domain isCreatedFromAdsUi callToAction impressionId isBlankAd isSurveyAd\n          isInAppBrowserOverride isVideo adLinkUrl adEvents { type url } appStoreData { appName\n          appIcon category downloadCount appRating } gallery { caption outboundUrl displayAddress\n          callToAction adEvents { type url } } campaign { id } formatData { id\n          leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    LatestFeedSdui: {
        id: "75a9c45a8cc7",
        operation: "query LatestFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $filterPosts: [ID!], $sort: PostFeedSort, $time:\n          PostFeedRange, $after: String, $crossPlatformContext:\n          CrossPlatformContextInput, $includeViewCount: Boolean = false ) { homeV3(adContext:\n          $adContextInput, feedContext: $feedContextInput, filterPosts:\n          $filterPosts, crossPlatformContext: $crossPlatformContext) { elements(sort:\n          $sort, time: $time, after: $after) { dist pageInfo { endCursor } edges {\n          __typename ...FeedElementEdgeFragment } } } }  fragment AdPayloadFragment on AdPayload {\n          adLinkUrl ctaMediaColor promoLayout adInstanceId domain isCreatedFromAdsUi callToAction\n          impressionId isBlankAd isSurveyAd isInAppBrowserOverride isVideo adLinkUrl adEvents { type\n          url } appStoreData { appName appIcon category downloadCount appRating } gallery { caption\n          outboundUrl displayAddress callToAction adEvents { type url } } campaign { id } formatData\n          { id leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    HomeFeedSdui: {
        id: "bdc1dc025b08",
        operation: "query HomeFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $filterPosts: [ID!], $sort: PostFeedSort, $time:\n          PostFeedRange, $after: String, $crossPlatformContext:\n          CrossPlatformContextInput, $includeViewCount: Boolean = false ) { homeV3(adContext:\n          $adContextInput, feedContext: $feedContextInput, filterPosts:\n          $filterPosts, crossPlatformContext: $crossPlatformContext) { elements(sort:\n          $sort, time: $time, after: $after) { dist pageInfo { endCursor } edges {\n          __typename ...FeedElementEdgeFragment } } } }  fragment AdPayloadFragment on AdPayload {\n          adLinkUrl ctaMediaColor promoLayout adInstanceId domain isCreatedFromAdsUi callToAction\n          impressionId isBlankAd isSurveyAd isInAppBrowserOverride isVideo adLinkUrl adEvents { type\n          url } appStoreData { appName appIcon category downloadCount appRating } gallery { caption\n          outboundUrl displayAddress callToAction adEvents { type url } } campaign { id } formatData\n          { id leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    WatchFeedSdui: {
        id: "2ae855ed6387",
        operation: "query WatchFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $filterPosts: [ID!], $sort: PostFeedSort, $time:\n          PostFeedRange, $after: String, $includeViewCount: Boolean = false ) {\n          watchFeed(adContext: $adContextInput, feedContext: $feedContextInput,\n          filterPosts: $filterPosts) { elements(sort: $sort, time: $time, after:\n          $after) { dist pageInfo { endCursor } edges { __typename ...FeedElementEdgeFragment\n          } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl ctaMediaColor promoLayout\n          adInstanceId domain isCreatedFromAdsUi callToAction impressionId isBlankAd isSurveyAd\n          isInAppBrowserOverride isVideo adLinkUrl adEvents { type url } appStoreData { appName\n          appIcon category downloadCount appRating } gallery { caption outboundUrl displayAddress\n          callToAction adEvents { type url } } campaign { id } formatData { id\n          leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    PopularFeedSdui: {
        id: "2736969ccc31",
        operation: "query PopularFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $filterPosts: [ID!], $region: RegionGeoCode, $sort:\n          PostFeedSort, $time: PostFeedRange, $after: String, $includeViewCount:\n          Boolean = false ) { popularV3(adContext: $adContextInput, feedContext:\n          $feedContextInput, filterPosts: $filterPosts, region: $region) {\n          elements(sort: $sort, time: $time, after: $after) { dist pageInfo {\n          endCursor } edges { __typename ...FeedElementEdgeFragment } } } }  fragment\n          AdPayloadFragment on AdPayload { adLinkUrl ctaMediaColor promoLayout adInstanceId domain\n          isCreatedFromAdsUi callToAction impressionId isBlankAd isSurveyAd isInAppBrowserOverride\n          isVideo adLinkUrl adEvents { type url } appStoreData { appName appIcon category\n          downloadCount appRating } gallery { caption outboundUrl displayAddress callToAction\n          adEvents { type url } } campaign { id } formatData { id leadGenerationInformation {\n          collectableUserInformation privacyPolicyUrl prompt disclaimerRichtext advertiserLegalName\n          } } }  fragment RecommendationContextFragment on RecommendationContext { typeIdentifier\n          typeName sourceId name isContextHidden richText }  fragment ActionCellFragment on\n          ActionCell { id isScoreHidden isModeratable commentCount shareImagePath isAwardHidden\n          score voteState shareCount isTranslatable viewCount @include(if: $includeViewCount)\n          }  fragment AdBrandSurveyCellFragment on AdBrandSurveyCell { id surveyUrl }  fragment\n          TitleCellFragment on TitleCell { id title isVisited }  fragment CellMediaSourceFragment on\n          CellMediaSource { path isObfuscated obfuscatedPath size { width height } }  fragment\n          GalleryCellPageFragment on GalleryCellPage { image { __typename ...CellMediaSourceFragment\n          } }  fragment AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment\n          on CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    GetEligibleUxExperiences: {
        id: "11e2f4c6b74c",
        operation: "query GetEligibleUxExperiences($experienceInputs: [UxTargetingExperience!]!,\n          $advancedConfiguration: UxTargetingAdvancedConfigurationInput!,\n          $clientContext: ClientContextInput) { eligibleUxExperiences(experienceInputs:\n          $experienceInputs, advancedConfiguration: $advancedConfiguration,\n          clientContext: $clientContext) { experience __typename } }",
    },
    StoreUxTargetingAction: {
        id: "93e39b0b35f9",
        operation: "mutation StoreUxTargetingAction($input: StorageInteractionInput!) {\n          storeUxTargetingAction(input: $input) { ok } }",
    },
    UpdateSubredditAuthorFlairSettings: {
        id: "9afe645069c9",
        operation: "mutation UpdateSubredditAuthorFlairSettings($input:\n          UpdateSubredditUserFlairSettingsInput!) { updateSubredditUserFlairSettings(input:\n          $input) { ok errors { message } } }",
    },
    UpdateSubredditPostFlairSettings: {
        id: "a8e293b7780b",
        operation: "mutation UpdateSubredditPostFlairSettings($input:\n          UpdateSubredditPostFlairSettingsInput!) { updateSubredditPostFlairSettings(input:\n          $input) { ok errors { message } } }",
    },
    ModActionApproveContent: {
        id: "b1001508eba1",
        operation: "mutation ModActionApproveContent($input: ModApproveInput!) { modApprove(input:\n          $input) { ok errors { message } } }",
    },
    ModActionBulkApproveContent: {
        id: "c65e11aec853",
        operation: "mutation ModActionBulkApproveContent($input: ModApproveBulkInput!) {\n          modApproveBulk(input: $input) { ok errors { message } } }",
    },
    ModActionBulkRemoveContent: {
        id: "b17942725185",
        operation: "mutation ModActionBulkRemoveContent($input: ModRemoveBulkInput!) {\n          modRemoveBulk(input: $input) { ok errors { message } } }",
    },
    ModActionRemoveContent: {
        id: "931a38d52740",
        operation: "mutation ModActionRemoveContent($input: ModRemoveInput!) { modRemove(input:\n          $input) { ok errors { message } } }",
    },
    ModActionStickyComment: {
        id: "1ac5839cb02d",
        operation: "mutation ModActionStickyComment($input: UpdateCommentStickyStateInput!) {\n          updateCommentStickyState(input: $input) { ok errors { message } } }",
    },
    ModActionStickyPost: {
        id: "68cc2b3cad6e",
        operation: "mutation ModActionStickyPost($input: UpdatePostStickyStateInput!) {\n          updatePostStickyState(input: $input) { ok errors { message } } }",
    },
    DeclineInvite: {
        id: "4fcc35add076",
        operation: "mutation DeclineInvite($input: DeclineChatChannelInviteInput!) {\n          declineChatChannelInvite(input: $input) { ok } }",
    },
    GetChatChannels: {
        id: "944dff740766",
        operation: "query GetChatChannels($memberStateFilter: MemberStateType!, $after: String,\n          $limit: Int!, $order: OrderType!, $channelTypes: [ChannelType!],\n          $isShowingReplicationInfo: Boolean) { searchChatUserChannels(memberStateFilter:\n          $memberStateFilter, first: $limit, after: $after, order: $order,\n          isShowingMember: true, isShowingEmpty: true, superMode: ALL, channelTypes:\n          $channelTypes, isShowingReplicationInfo: $isShowingReplicationInfo) { pageInfo\n          { hasNextPage endCursor } edges { node { channelSendbirdId customType name\n          unreadMessageCount unreadMentionCount createdAt isPushEnabled lastMessage { messageId\n          channelSendbirdId createdAt type customType message data sender { __typename\n          ...redditorInfoInChatChannel } } inviter { __typename ...redditorInfoInChatChannel }\n          memberCount channelMembers { redditor { __typename ...redditorInfoInChatChannel } } data {\n          creationReason } replicationInfo { status correspondingRoomId } } } } }  fragment\n          redditorInfoInChatChannel on RedditorInfo { __typename ... on Redditor { id name icon {\n          url } snoovatarIcon { url } profile { isNsfw } karma { total } cakeDayOn } }",
    },
    GetChatUsersByIds: {
        id: "bc73f70dbd88",
        operation: "query GetChatUsersByIds($userKindWithIds: [ID!]!) { redditorsInfoByIds(ids:\n          $userKindWithIds) { __typename ...redditorInfoInChatChannel } }  fragment\n          redditorInfoInChatChannel on RedditorInfo { __typename ... on Redditor { id name icon {\n          url } snoovatarIcon { url } profile { isNsfw } karma { total } cakeDayOn } }",
    },
    LeaveChatChannel: {
        id: "5362e53d817a",
        operation: "mutation LeaveChatChannel($input: LeaveChatChannelInput!) { leaveChatChannel(input:\n          $input) { ok errors { message } } }",
    },
    ReadFeedSdui: {
        id: "0af2dcf43a39",
        operation: "query ReadFeedSdui($adContextInput: AdContextInput, $feedContextInput:\n          FeedContextInput, $sort: PostFeedSort, $time: PostFeedRange, $after:\n          String, $includeViewCount: Boolean = false ) { readFeed(adContext:\n          $adContextInput, feedContext: $feedContextInput) { elements(sort: $sort,\n          time: $time, after: $after) { dist pageInfo { endCursor } edges { __typename\n          ...FeedElementEdgeFragment } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl\n          ctaMediaColor promoLayout adInstanceId domain isCreatedFromAdsUi callToAction impressionId\n          isBlankAd isSurveyAd isInAppBrowserOverride isVideo adLinkUrl adEvents { type url }\n          appStoreData { appName appIcon category downloadCount appRating } gallery { caption\n          outboundUrl displayAddress callToAction adEvents { type url } } campaign { id } formatData\n          { id leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    MatureFeedSdui: {
        id: "786a5b176e4c",
        operation: "query MatureFeedSdui($feedContextInput: FeedContextInput, $sort: PostFeedSort,\n          $time: PostFeedRange, $after: String, $includeViewCount: Boolean = false\n          ) { xFeedV3(feedContext: $feedContextInput) { elements(sort: $sort, time:\n          $time, after: $after) { dist pageInfo { endCursor } edges { __typename\n          ...FeedElementEdgeFragment } } } }  fragment AdPayloadFragment on AdPayload { adLinkUrl\n          ctaMediaColor promoLayout adInstanceId domain isCreatedFromAdsUi callToAction impressionId\n          isBlankAd isSurveyAd isInAppBrowserOverride isVideo adLinkUrl adEvents { type url }\n          appStoreData { appName appIcon category downloadCount appRating } gallery { caption\n          outboundUrl displayAddress callToAction adEvents { type url } } campaign { id } formatData\n          { id leadGenerationInformation { collectableUserInformation privacyPolicyUrl prompt\n          disclaimerRichtext advertiserLegalName } } }  fragment RecommendationContextFragment on\n          RecommendationContext { typeIdentifier typeName sourceId name isContextHidden richText } \n          fragment ActionCellFragment on ActionCell { id isScoreHidden isModeratable commentCount\n          shareImagePath isAwardHidden score voteState shareCount isTranslatable viewCount\n          @include(if: $includeViewCount) }  fragment AdBrandSurveyCellFragment on\n          AdBrandSurveyCell { id surveyUrl }  fragment TitleCellFragment on TitleCell { id title\n          isVisited }  fragment CellMediaSourceFragment on CellMediaSource { path isObfuscated\n          obfuscatedPath size { width height } }  fragment GalleryCellPageFragment on\n          GalleryCellPage { image { __typename ...CellMediaSourceFragment } }  fragment\n          AdEventFragment on AdEvent { type url }  fragment CallToActionCellFragment on\n          CallToActionCell { id callToAction outboundUrl displayAddress caption subcaption\n          subcaptionStrikethrough }  fragment IndicatorsCellFragment on IndicatorsCell { id\n          indicators }  fragment AdGalleryCellFragment on AdGalleryCell { id titleCell { __typename\n          ...TitleCellFragment } height pages { page { __typename ...GalleryCellPageFragment }\n          galleryPageAdEvents { __typename ...AdEventFragment } callToActionCell { __typename\n          ...CallToActionCellFragment } } supplementaryTextString indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment ColorFragment on CellColor { __typename ... on\n          NativeCellColor { name } ... on CustomCellColor { rgbaColor } }  fragment\n          AdMetadataCellFragment on AdMetadataCell { id createdAt authorName color { __typename\n          ...ColorFragment } iconPath }  fragment AdPromotedCommunityPostCellFragment on\n          AdPromotedCommunityPostCell { id postId postType title thumbnailImage { __typename\n          ...CellMediaSourceFragment } upvotesCount commentsCount\n          promotedCommunityPostSubredditName: subredditName subredditImage { __typename\n          ...CellMediaSourceFragment } subredditBackgroundColor }  fragment\n          AdPromotedUserPostCellItemFragment on AdPromotedUserPostCellItem { postId title\n          upvotesText upvotesCount commentsText commentsCount postImage { type media { __typename\n          ...CellMediaSourceFragment } } }  fragment AdPromotedUserPostCollectionCellFragment on\n          AdPromotedUserPostCollectionCell { id promotedPosts { __typename\n          ...AdPromotedUserPostCellItemFragment } postsViaText promotedUserPostSubredditName:\n          subredditName subredditImage { __typename ...CellMediaSourceFragment } }  fragment\n          LegacyVideoCellFragment on LegacyVideoCell { id media { __typename\n          ...CellMediaSourceFragment } preview { __typename ...CellMediaSourceFragment } isGif\n          isLiveVideoPostOrCrosspost isAdPost isAutoplayAllowed isVideoButtonExpanded\n          isOverlayControlHidden subredditVisualName videoIdentifier type callToAction title\n          subredditId }  fragment AdSpotlightVideoCellFragment on AdSpotlightVideoCell { id iconPath\n          title details videoCell { __typename ...LegacyVideoCellFragment } }  fragment\n          AdSupplementaryTextCellFragment on AdSupplementaryTextCell { id supplementaryText } \n          fragment AppInstallCallToActionCellFragment on AppInstallCallToActionCell { id\n          appStoreInfo { appName appIcon appRating category downloadCount } callToActionString } \n          fragment AwardsCellFragment on AwardsCell { id total iconSources { __typename\n          ...CellMediaSourceFragment } }  fragment PreviewTextCellFragment on PreviewTextCell { id\n          text numberOfLines isRead }  fragment ClassicMetadataCellFragment on ClassicMetadataCell {\n          id createdAt subredditName color { __typename ...ColorFragment } iconPath detailsLink } \n          fragment ClassicThumbnailCellFragment on ClassicThumbnailCell { id image { __typename\n          ...CellMediaSourceFragment } isVideo }  fragment ClassicCellFragment on ClassicCell { id\n          titleCell { __typename ...TitleCellFragment } previewTextCell { __typename\n          ...PreviewTextCellFragment } indicatorsCell { __typename ...IndicatorsCellFragment }\n          awardsCell { __typename ...AwardsCellFragment } metadataCell { __typename\n          ...ClassicMetadataCellFragment } thumbnailCell { __typename\n          ...ClassicThumbnailCellFragment } }  fragment CommunityRecommendationsUnitCellFragment on\n          CommunityRecommendationsUnitCell { title modelVersion communityRecommendations {\n          __typename id ... on CommunityRecommendation { usersAvatars { url } subreddit { id name\n          subscribersCount publicDescriptionText activeCount styles { icon legacyIcon { url } } } }\n          } }  fragment MetadataCellFragment on MetadataCell { id createdAt authorName color {\n          __typename ...ColorFragment } detailsString detailsLink iconPath iconShape\n          isJoinButtonShown joinSubredditId isOverflowButtonHidden mediaPath mediaDomain\n          isRecommended statusIndicators }  fragment ContentFragment on Content { markdown richtext\n          }  fragment MediaSourceFragment on MediaSource { url dimensions { width height } } \n          fragment RedditorFragment on Redditor { id displayName icon { __typename\n          ...MediaSourceFragment } profile { isNsfw } snoovatarIcon { __typename\n          ...MediaSourceFragment } }  fragment DeletedRedditorFragment on DeletedRedditor { id\n          displayName }  fragment UnavailableRedditorFragment on UnavailableRedditor { id\n          displayName }  fragment RedditorInfoFragment on RedditorInfo { __typename\n          ...RedditorFragment ...DeletedRedditorFragment ...UnavailableRedditorFragment }  fragment\n          FeedCommentFragment on Comment { id createdAt content { __typename ...ContentFragment }\n          authorInfo { __typename ...RedditorInfoFragment } score awardings { total } }  fragment\n          DeletedCommentFragment on DeletedComment { id }  fragment CommentInfoFragment on\n          CommentInfo { __typename ...FeedCommentFragment ...DeletedCommentFragment }  fragment\n          CommentTreeFragment on CommentTree { childCount depth parentId node { __typename\n          ...CommentInfoFragment } }  fragment ConversationCellFragment on ConversationCell { id\n          metadataCell { __typename ...MetadataCellFragment } titleCell { __typename\n          ...TitleCellFragment } comments { __typename ...CommentTreeFragment } }  fragment\n          EmptyContentCellFragment on EmptyContentCell { id }  fragment FullViewVideoCellFragment on\n          FullViewVideoCell { id indicatorsCell { __typename ...IndicatorsCellFragment }\n          mediaTintColor { __typename ...ColorFragment } metadataCell { __typename\n          ...MetadataCellFragment } titleCell { __typename ...TitleCellFragment } videoCell {\n          __typename ...LegacyVideoCellFragment } }  fragment GalleryCellFragment on GalleryCell {\n          id height pages { __typename ...GalleryCellPageFragment } }  fragment\n          GalleryWithLinkFooterCellFragment on GalleryWithLinkFooterCell { id height pages { page {\n          __typename ...GalleryCellPageFragment } footer { outboundUrl caption displayUrl } } } \n          fragment ImageCellFragment on ImageCell { id media { __typename ...CellMediaSourceFragment\n          } }  fragment LinkCellFragment on LinkCell { id path media { __typename\n          ...CellMediaSourceFragment } domain }  fragment MarginCellFragment on MarginCell { id\n          height color { __typename ... on NativeCellColor { name } ... on CustomCellColor {\n          rgbaColor } } }  fragment MerchandisingUnitCellFragment on MerchandisingUnitCell { id\n          unitId title url format body content { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on MerchandisingUnitGallery { images {\n          __typename ...GalleryCellPageFragment } } } cta }  fragment MetricCellFragment on\n          MetricCell { id commentCount score isScoreHidden }  fragment NewsMetadataCellFragment on\n          NewsMetadataCell { id createdAtOptional: createdAt topic subredditName }  fragment\n          NewsProfileMetadataCellFragment on NewsProfileMetadataCell { id createdAtOptional:\n          createdAt username link }  fragment RichtextRecommendationContextCellFragment on\n          RichtextRecommendationContextCell { id rtJsonText }  fragment SortCellFragment on SortCell\n          { isModerator layoutOptions }  fragment TitleWithThumbnailCollapsedCellFragment on\n          TitleWithThumbnailCollapsedCell { id titleCell { __typename ...TitleCellFragment }\n          thumbnail { __typename ... on CellMedia { type sourceData { __typename\n          ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment } }\n          indicatorsCell { __typename ...IndicatorsCellFragment } }  fragment\n          TitleWithThumbnailCellFragment on TitleWithThumbnailCell { id titleCell { __typename\n          ...TitleCellFragment } thumbnail { __typename ... on CellMedia { type sourceData {\n          __typename ...CellMediaSourceFragment } } ... on LinkCell { __typename ...LinkCellFragment\n          } } previewTextCell { __typename ...PreviewTextCellFragment } indicatorsCell { __typename\n          ...IndicatorsCellFragment } }  fragment TrendingCarouselCellItemFragment on\n          TrendingCarouselCellItem { title query image { __typename ...CellMediaSourceFragment }\n          adPostId payload { __typename ...AdPayloadFragment } }  fragment\n          TrendingCarouselCellFragment on TrendingCarouselCell { id title items { __typename\n          ...TrendingCarouselCellItemFragment } }  fragment YoutubeCellFragment on YoutubeCell { id\n          video { __typename ...CellMediaSourceFragment } preview { __typename\n          ...CellMediaSourceFragment } title createdAt isAdPost }  fragment CellGroupFragment on\n          CellGroup { adPayload { __typename ...AdPayloadFragment } groupRecommendationContext:\n          recommendationContext { __typename ...RecommendationContextFragment } cells { __typename\n          ...ActionCellFragment ...AdBrandSurveyCellFragment ...AdGalleryCellFragment\n          ...AdMetadataCellFragment ...AdPromotedCommunityPostCellFragment\n          ...AdPromotedUserPostCollectionCellFragment ...AdSpotlightVideoCellFragment\n          ...AdSupplementaryTextCellFragment ...AppInstallCallToActionCellFragment\n          ...AwardsCellFragment ...CallToActionCellFragment ...ClassicCellFragment\n          ...ClassicMetadataCellFragment ...ClassicThumbnailCellFragment\n          ...CommunityRecommendationsUnitCellFragment ...ConversationCellFragment\n          ...EmptyContentCellFragment ...FullViewVideoCellFragment ...GalleryCellFragment\n          ...GalleryWithLinkFooterCellFragment ...ImageCellFragment ...IndicatorsCellFragment\n          ...LegacyVideoCellFragment ...LinkCellFragment ...MarginCellFragment\n          ...MerchandisingUnitCellFragment ...MetadataCellFragment ...MetricCellFragment\n          ...NewsMetadataCellFragment ...NewsProfileMetadataCellFragment ...PreviewTextCellFragment\n          ...RichtextRecommendationContextCellFragment ...SortCellFragment ...TitleCellFragment\n          ...TitleWithThumbnailCollapsedCellFragment ...TitleWithThumbnailCellFragment\n          ...TrendingCarouselCellFragment ...YoutubeCellFragment } }  fragment\n          PostRecommendationContextFragment on PostRecommendation { id recommendationContext {\n          __typename typeIdentifier ... on InterestTopicRecommendationContext { interestTopicNode {\n          id topic { name title } } } ... on SimilarSubredditRecommendationContext { subreddit {\n          __typename id ... on Subreddit { name prefixedName } } } ... on\n          TimeOnSubredditRecommendationContext { subreddit { __typename id ... on Subreddit { name\n          prefixedName } } } ... on OnboardingPracticeFeedRecommendationContext { interestTopicNode\n          { id topic { name title } } } ... on InactiveCommunityDiscoveryRecommendationContext {\n          discoverTopic { name slug } } ... on FunnyRecommendationContext { discoverTopic { slug\n          name } } } }  fragment FeedElementEdgeFragment on FeedElementEdge { node { __typename id\n          ... on CellGroup { __typename groupId payload ...CellGroupFragment }\n          ...PostRecommendationContextFragment } }",
    },
    CountryCodeNames: {
        id: "36867720114d",
        operation: "query CountryCodeNames { countryCodesNames { isoCode name } }",
    },
    OnboardingSubredditRecommendations: {
        id: "4ca6845ff69b",
        operation: "query OnboardingSubredditRecommendations($includeSubscriptions: Boolean!,\n          $onboardingContext: OnboardingContext, $first: Int, $last: Int,\n          $before: String, $after: String) {\n          onboardingSubredditRecommendations(includeSubscriptions: $includeSubscriptions,\n          onboardingContext: $onboardingContext, first: $first, last: $last,\n          before: $before, after: $after) { pageInfo { hasNextPage hasPreviousPage\n          startCursor endCursor } edges { node { id name styles { icon legacyIcon { url } }\n          publicDescriptionText isSubscribed onboardingInterestTopics { id topic { name title } } }\n          } } }",
    },
    TODO: {
        id: "",
        operation: "query OnboardingSubredditRecommendations($includeSubscriptions: Boolean!, $onboardingContext: OnboardingContext, $first: Int, $last: Int, $before: String, $after: String) { onboardingSubredditRecommendations(includeSubscriptions: $includeSubscriptions, onboardingContext: $onboardingContext, first: $first, last: $last, before: $before, after: $after) { pageInfo { hasNextPage hasPreviousPage startCursor endCursor } edges { node { id name styles { icon legacyIcon { url } } publicDescriptionText isSubscribed onboardingInterestTopics { id topic { name title } } } } } }",
    },
    GeoPlaceAutocomplete: {
        id: "153f29c0e30b",
        operation: "query GeoPlaceAutocomplete($query: String!, $sessionId: ID!) {\n          geoPlaceAutocomplete(query: $query, sessionId: $sessionId) { id name source }\n          }",
    },
    UserLocation: {
        id: "390a70b4483f",
        operation: "query UserLocation { userLocation { countryCode regionCode cityCode cityUtf8 } }",
    },
    ContentLanguages: {
        id: "65f77606ea8d",
        operation: "query ContentLanguages($listKey: String!) { languagesList(listKey: $listKey) {\n          translatedDisplayName isoCode } }",
    },
    SpokenLanguages: {
        id: "e68ec40b2ac0",
        operation: "query SpokenLanguages { identity { preferences { spokenLanguages } } }",
    },
    UpdateSpokenLanguages: {
        id: "4bf06169498f",
        operation: "mutation UpdateSpokenLanguages($input: UpdateSpokenLanguagesPreferenceInput!) {\n          updateSpokenLanguagesPreference(input: $input) { ok errors { message } } }",
    },
    GetModeratedSubreddits: {
        id: "c78230aed252",
        operation: "query GetModeratedSubreddits($moderatorId: ID!) { redditorInfoById(id:\n          $moderatorId) { __typename ... on Redditor { moderatedSubreddits { edges { node { id\n          name styles { icon legacyIcon { url } } } } } } } }",
    },
    GetModerators: {
        id: "490777a9dd23",
        operation: "query GetModerators($subredditId: ID!) { subredditInfoById(id: $subredditId) {\n          __typename ... on Subreddit { moderatorMembers { edges { node { redditor { displayName id\n          } } } } } } }",
    },
    GetSurveyServices: {
        id: "4bc1c377ad54",
        operation: "query GetSurveyServices { customerSurveyConfig { activeSurveys { steps { question\n          questionOptions followUpQuestion type } variants { sampleFactor surveyEnabled\n          triggerThreshold variantName } triggerEvent experimentName } meta { lang client }\n          surveyCooldownDays } }",
    },
    GetRules: {
        id: "3aeabe572989",
        operation: "query GetRules($subredditId: ID!) { subredditInfoById(id: $subredditId) {\n          __typename ... on Subreddit { rules { __typename ...Rule } } } }  fragment Rule on\n          SubredditRule { id name kind violationReason priority content { richtext } }",
    },
    GetSiteRules: {
        id: "c10b43967b22",
        operation: "query GetSiteRules($subredditId: ID!) { subredditInfoById(id: $subredditId) {\n          __typename ... on Subreddit { siteRules { ruleText } } } }",
    },
    DeleteSubredditMuteSettings: {
        id: "190eb2da11f6",
        operation: "mutation DeleteSubredditMuteSettings($input: DeleteSubredditMuteSettingInput!) {\n          deleteSubredditMuteSettings(input: $input) { ok errors { message } } }",
    },
    IsSubredditMuted: {
        id: "2b5db44b5199",
        operation: "query IsSubredditMuted($subredditId: ID!) { subredditInfoById(id: $subredditId)\n          { __typename ... on Subreddit { isMuted } } }",
    },
    MutedSubreddits: {
        id: "5a11c5683cf3",
        operation: "query MutedSubreddits($before: String, $after: String, $first: Int,\n          $last: Int) { identity { mutedSubreddits(before: $before, after: $after,\n          first: $first, last: $last) { edges { node { __typename\n          ...mutedSubredditFragment } } pageInfo { hasNextPage hasPreviousPage startCursor endCursor\n          } } } }  fragment mutedSubredditFragment on Subreddit { id name styles { icon } }",
    },
    SearchSubredditForMute: {
        id: "e68766dcc86a",
        operation: "query SearchSubredditForMute($subredditName: String!) { subredditInfoByName(name:\n          $subredditName) { __typename id ... on Subreddit { styles { icon } isMuted } } }",
    },
    UpdateSubredditMuteSettings: {
        id: "e6018496878b",
        operation: "mutation UpdateSubredditMuteSettings($input: UpdateSubredditMuteSettingsInput!) {\n          updateSubredditMuteSettings(input: $input) { ok errors { message } } }",
    },
    AcceptPromotion: {
        id: "dd296f83d016",
        operation: "mutation AcceptPromotion($platformUserId: ID!, $offerId: ID!) {\n          acceptPromotion(input: { platformUserId: $platformUserId offerId: $offerId } )\n          { ok } }",
    },
    AckLiveAudioRoomMessage: {
        id: "d7a6d439d15f",
        operation: "mutation AckLiveAudioRoomMessage($platformUserId: ID!, $messageId: ID!) {\n          ackRoomMessage(input: { platformUserId: $platformUserId messageId: $messageId\n          } ) { ok } }",
    },
    AddApprovedHost: {
        id: "5b390a85372e",
        operation: "mutation AddApprovedHost($userId: ID!, $subredditId: ID!) {\n          addApprovedHostMember(input: { userId: $userId subredditId: $subredditId } ) {\n          ok errorState { code } } }",
    },
    AvailableAudioRoomTopics: {
        id: "560977204497",
        operation: "query AvailableAudioRoomTopics { availableAudioRoomTopics { emoji id shortDisplayName }\n          }",
    },
    AvailableLiveAudioRooms: {
        id: "4373bedcfe6c",
        operation: "query AvailableLiveAudioRooms($first: Int, $after: String) {\n          availableAudioRooms(first: $first, after: $after) { pageInfo { hasNextPage\n          hasPreviousPage startCursor endCursor } edges { node { roomId roomTitle subredditInfo { id\n          name } postId platform metadata participantCount notificationPath } } } }",
    },
    AvailableTalkRooms: {
        id: "f4bdbfed07c1",
        operation: "query AvailableTalkRooms($first: Int, $after: String) {\n          availableTalkRooms(first: $first, after: $after) { pageInfo { hasNextPage\n          hasPreviousPage startCursor endCursor } edges { node { roomId roomTitle startedAt post {\n          __typename id title ... on SubredditPost { subreddit { id name styles { icon } } } ... on\n          ProfilePost { profile { name styles { icon } } } commentCount } platform metadata\n          participantCount notificationPath } } } }",
    },
    BanUserInRoom: {
        id: "e7814404a13b",
        operation: "mutation BanUserInRoom($platformUserId: ID!, $targetUserId: ID!) {\n          banUserInRoom(input: { platformUserId: $platformUserId targetUserId:\n          $targetUserId } ) { ok } }",
    },
    CanCreateTalkOnProfile: {
        id: "a802cd5d0253",
        operation: "query CanCreateTalkOnProfile($username: String!) { profileByName(name:\n          $username) { allowedPostTypes } }",
    },
    CanCreateTalkOnSubreddit: {
        id: "b350d151f6be",
        operation: "query CanCreateTalkOnSubreddit($subredditId: ID!) { subredditInfoById(id:\n          $subredditId) { __typename ... on Subreddit { allowedPostTypes } } }",
    },
    ChangeUserRole: {
        id: "626290fc0461",
        operation: "mutation ChangeUserRole($localUser: ID!, $targetUser: ID!, $role:\n          AudioRole!) { changeRoleInRoom(input: { platformUserId: $localUser targetUserId:\n          $targetUser role: $role } ) { newRole } }",
    },
    CloseLiveAudioRoomOrError: {
        id: "9bcdee2902bd",
        operation: "mutation CloseLiveAudioRoomOrError($platformUserId: ID!) { closeRoomOrError(input: {\n          platformUserId: $platformUserId } ) { ok okState { closedAt } errorState { code\n          details } } }",
    },
    CreateLiveAudioRoomOrError: {
        id: "6f977e880d2a",
        operation: "mutation CreateLiveAudioRoomOrError($ikey: String, $subredditId: ID!,\n          $roomName: String!, $topicIds: [ID!], $metadata: String!,\n          $platform: AudioPlatform!, $sendReplyNotifications: Boolean) {\n          createAudioRoomOrError(input: { ikey: $ikey subredditId: $subredditId\n          roomTitle: $roomName topicIds: $topicIds metadata: $metadata platform:\n          $platform sendReplyNotifications: $sendReplyNotifications } ) { ok okState {\n          roomId postId notificationPath } errorState { code details } } }",
    },
    CreateRoomOnProfile: {
        id: "e156cb6958b4",
        operation: "mutation CreateRoomOnProfile($ikey: String, $roomName: String!,\n          $topicIds: [ID!], $metadata: String!, $platform: AudioPlatform!,\n          $sendReplyNotifications: Boolean) { createAudioRoomOnProfile(input: { ikey:\n          $ikey roomTitle: $roomName topicIds: $topicIds metadata: $metadata\n          platform: $platform sendReplyNotifications: $sendReplyNotifications } ) { ok\n          okState { roomId postId notificationPath } errorState { code details } } }",
    },
    DeclinePromotion: {
        id: "8e66f6bb0d80",
        operation: "mutation DeclinePromotion($platformUserId: ID!, $offerId: ID!) {\n          declinePromotion(input: { platformUserId: $platformUserId offerId: $offerId }\n          ) { ok } }",
    },
    JoinLiveAudioRoomOrError: {
        id: "cac37513c6d6",
        operation: "mutation JoinLiveAudioRoomOrError($roomId: ID!, $deviceId: ID!,\n          $subredditId: ID, $apiVersion: AudioPlatformApiVersion) {\n          joinAudioRoomOrError(input: { roomId: $roomId deviceId: $deviceId subredditId:\n          $subredditId apiVersion: $apiVersion } ) { ok okState { platformToken\n          platformUserId platformInfo signalingToken sequentialUserId role notificationPath }\n          errorState { code details } } }",
    },
    LeaveLiveAudioRoom: {
        id: "72a9d7fde179",
        operation: "mutation LeaveLiveAudioRoom($platformUserId: ID!) { leaveAudioRoom(input: {\n          platformUserId: $platformUserId } ) { ok } }",
    },
    LiveAudioRaisedHandsById: {
        id: "544c16d799cc",
        operation: "query LiveAudioRaisedHandsById($platformUserId: ID!, $first: Int,\n          $before: String, $after: String) { audioRoomRaisedHandsById(platformUserId:\n          $platformUserId, first: $first, before: $before, after: $after) {\n          pageInfo { hasNextPage hasPreviousPage startCursor endCursor } edges { node {\n          platformUserId handRaisedAt redditorInfo { __typename id ...talkRedditorFragment } } } } }\n           fragment talkRedditorFragment on Redditor { id name displayName cakeDayOn karma { total }\n          icon { url } snoovatarIcon { url } profile { styles { profileBanner\n          legacyBannerBackgroundImage } isNsfw title publicDescriptionText } isFollowed\n          isPremiumMember isAcceptingFollowers }",
    },
    LiveAudioRoomBansById: {
        id: "27ff1483771b",
        operation: "query LiveAudioRoomBansById($platformUserId: ID, $roomId: ID!, $first:\n          Int, $after: String) { audioRoomBansById(platformUserId: $platformUserId,\n          roomId: $roomId, first: $first, after: $after) { pageInfo { hasNextPage\n          hasPreviousPage startCursor endCursor } edges { node { bannedUser { __typename\n          ...talkRedditorFragment } bannedBy { __typename ...talkRedditorFragment } bannedAt } } } }\n           fragment talkRedditorFragment on Redditor { id name displayName cakeDayOn karma { total }\n          icon { url } snoovatarIcon { url } profile { styles { profileBanner\n          legacyBannerBackgroundImage } isNsfw title publicDescriptionText } isFollowed\n          isPremiumMember isAcceptingFollowers }",
    },
    LiveAudioRoomById: {
        id: "255a02044d86",
        operation: "query LiveAudioRoomById($roomId: ID!) { audioRoomById(roomId: $roomId) { roomId\n          roomTitle subredditInfo { __typename id name ... on Subreddit { styles { icon } } } isLive\n          postId platform metadata participantCount notificationPath recordingStatus recordingHlsUrl\n          recordingDashUrl recordingFallbackUrl recordingDuration } }",
    },
    LiveAudioUserProfile: {
        id: "94b7a90552f9",
        operation: "query LiveAudioUserProfile($name: String!) { redditorInfoByName(name: $name) {\n          __typename id ...talkRedditorFragment } }  fragment talkRedditorFragment on Redditor { id\n          name displayName cakeDayOn karma { total } icon { url } snoovatarIcon { url } profile {\n          styles { profileBanner legacyBannerBackgroundImage } isNsfw title publicDescriptionText }\n          isFollowed isPremiumMember isAcceptingFollowers }",
    },
    LiveAudioUserProfileWithSubreddit: {
        id: "a249aad0b66e",
        operation: "query LiveAudioUserProfileWithSubreddit($name: String!, $id: ID!,\n          $subredditId: ID!) { redditorInfoByName(name: $name) { __typename id\n          ...talkRedditorFragment ... on Redditor { subredditMemberInfo(subredditId:\n          $subredditId) { isApprovedTalkHost subreddit { modNotes(filter: ALL, userId:\n          $id) { totalCount } } } } } }  fragment talkRedditorFragment on Redditor { id name\n          displayName cakeDayOn karma { total } icon { url } snoovatarIcon { url } profile { styles\n          { profileBanner legacyBannerBackgroundImage } isNsfw title publicDescriptionText }\n          isFollowed isPremiumMember isAcceptingFollowers }",
    },
    LowerHandOrError: {
        id: "6b840dfd67d6",
        operation: "mutation LowerHandOrError($platformUserId: ID!) { lowerHandInRoomOrError(input: {\n          platformUserId: $platformUserId } ) { okState { isSuccessful } errorState { code\n          details } } }",
    },
    MuteAllUsers: {
        id: "d9edaab6dec9",
        operation: "mutation MuteAllUsers($platformUserId: ID!) { muteAllInRoom(input: { platformUserId:\n          $platformUserId } ) { ok errorState { code details } } }",
    },
    MuteUser: {
        id: "47fbea0ff650",
        operation: "mutation MuteUser($platformUserId: ID!, $targetUserId: ID!) {\n          muteUserInRoom(input: { platformUserId: $platformUserId targetUserId:\n          $targetUserId } ) { ok } }",
    },
    OfferPromotionOrError: {
        id: "6d9fbe441129",
        operation: "mutation OfferPromotionOrError($platformUserId: ID!, $targetUserId: ID!,\n          $role: AudioRole!) { offerPromotionOrError(input: { platformUserId:\n          $platformUserId targetUserId: $targetUserId role: $role } ) { ok okState\n          { offerId } errorState { code details } } }",
    },
    PrepareTalkRoomOnProfile: {
        id: "82d1d8e54553",
        operation: "mutation PrepareTalkRoomOnProfile($ikey: String, $roomName: String!,\n          $topicIds: [ID!], $metadata: String!, $platform: AudioPlatform!,\n          $sendReplyNotifications: Boolean) { prepareAudioRoomOnProfile(input: { ikey:\n          $ikey roomTitle: $roomName topicIds: $topicIds metadata: $metadata\n          platform: $platform sendReplyNotifications: $sendReplyNotifications } ) {\n          okState { roomId postId } errorState { code details } } }",
    },
    PrepareTalkRoomOnSubreddit: {
        id: "023f655572ff",
        operation: "mutation PrepareTalkRoomOnSubreddit($ikey: String, $subredditId: ID!,\n          $roomName: String!, $topicIds: [ID!], $metadata: String!,\n          $platform: AudioPlatform!, $sendReplyNotifications: Boolean) {\n          prepareAudioRoom(input: { ikey: $ikey subredditId: $subredditId roomTitle:\n          $roomName topicIds: $topicIds metadata: $metadata platform:\n          $platform sendReplyNotifications: $sendReplyNotifications } ) { okState {\n          roomId postId } errorState { code details } } }",
    },
    RaiseHandOrError: {
        id: "cef982d25d90",
        operation: "mutation RaiseHandOrError($platformUserId: ID!) { raiseHandInRoomOrError(input: {\n          platformUserId: $platformUserId } ) { okState { isSuccessful } errorState { code\n          details } } }",
    },
    RemoveApprovedHost: {
        id: "1fab500b96f5",
        operation: "mutation RemoveApprovedHost($userId: ID!, $subredditId: ID!) {\n          removeApprovedHostMember(input: { userId: $userId subredditId: $subredditId }\n          ) { ok errorState { code } } }",
    },
    SendEmoji: {
        id: "82a27a006be4",
        operation: "mutation SendEmoji($platformUserId: ID!, $emojiUrl: URL!) {\n          setUserReactionInRoom(input: { platformUserId: $platformUserId emojiUrl:\n          $emojiUrl } ) { ok errors { message } } }",
    },
    StartTalkRoom: {
        id: "4ff3e15eb2c5",
        operation: "mutation StartTalkRoom($roomId: ID!) { startAudioRoom(input: { roomId: $roomId\n          } ) { okState { notificationPath } errorState { code details } } }",
    },
    TalkRoomById: {
        id: "c8522278660d",
        operation: "query TalkRoomById($roomId: ID!) { talkRoomById(roomId: $roomId) { __typename\n          roomId platform isLive notificationPath startedAt roomTitle post { __typename id title ...\n          on SubredditPost { subreddit { id name styles { icon } } } ... on ProfilePost { profile {\n          name styles { icon } } } commentCount } metadata participantCount ...talkRecordingFragment\n          } }  fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }",
    },
    UnbanUserInRoom: {
        id: "8eeed5b5e809",
        operation: "mutation UnbanUserInRoom($roomId: ID!, $platformUserId: ID!,\n          $targetUserId: ID!) { unbanUserInRoom(input: { roomId: $roomId platformUserId:\n          $platformUserId targetUserId: $targetUserId } ) { okState { isSuccessful }\n          errorState { code details } } }",
    },
    AdsLeadGenCurrentUserIdentity: {
        id: "13a6f6c8c69b",
        operation: "query AdsLeadGenCurrentUserIdentity { identity { email isEmailVerified } }",
    },
    SubmitUserContactForAd: {
        id: "605921990550",
        operation: "mutation SubmitUserContactForAd($input: UserContactForAd!) {\n          submitUserContactForAd(input: $input) { ok errors { message } } }",
    },
    GetIdentityCoins: {
        id: "fcdd7c9fb4fe",
        operation: "query GetIdentityCoins { identity { coins } }",
    },
    SubredditCoinBalances: {
        id: "4e651315caa0",
        operation: "query SubredditCoinBalances { identity { coins userCoinsInSubreddits { amount subreddit {\n          id name styles { icon } } } } }",
    },
    SubredditCoins: {
        id: "101f119cbda0",
        operation: "query SubredditCoins($subreddit: ID!) { subredditInfoById(id: $subreddit) {\n          __typename ... on Subreddit { userCoinsInSubreddit { amount } } } }",
    },
    CommunityChatEditingPermission: {
        id: "1d19c8920e51",
        operation: "query CommunityChatEditingPermission($user_id: ID!, $after: String = \"\" ) {\n          redditorInfoById(id: $user_id) { __typename ... on Redditor {\n          moderatedSubreddits(after: $after) { pageInfo { hasNextPage endCursor } edges { node\n          { modPermissions { isCommunityChatEditingAllowed } } } } } } }",
    },
    CommunityChatModQueue: {
        id: "2652c0c28ae5",
        operation: "query CommunityChatModQueue($subredditIds: [ID!], $sortType: ModQueueSort,\n          $after: String) { modQueueItems(subredditIds: $subredditIds, queueType:\n          COMMUNITY_CHAT, sort: $sortType, after: $after) { pageInfo { __typename\n          ...fullPageInfoFragment } edges { node { __typename subredditInfo { __typename\n          ...subredditFragment } ... on ModQueueItemMatrixChatEvent { id matrixEvent { __typename\n          ...matrixEventFragment } } } cursor } } }  fragment fullPageInfoFragment on PageInfo {\n          hasNextPage hasPreviousPage startCursor endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment subredditFragment on Subreddit {\n          id name prefixedName isQuarantined title type subscribersCount isNsfw isSubscribed\n          isThumbnailsEnabled isFavorite path styles { icon legacyIcon { __typename\n          ...mediaSourceFragment } primaryColor bannerBackgroundImage legacyBannerBackgroundImage\n          legacyPrimaryColor } modPermissions { isAccessEnabled } isTitleSafe isUserBanned\n          isMediaInCommentsSettingShown allowedMediaInComments isMuted isChannelsEnabled }  fragment\n          redditorNameAndAvatarFragment on RedditorInfo { __typename ... on Redditor { id name\n          snoovatarIcon { url } icon { url } profile { isNsfw } } ... on UnavailableRedditor { id\n          name } ... on DeletedRedditor { id name } }  fragment resolutionFragment on ModerationInfo\n          { verdict verdictAt verdictByRedditorInfo { __typename ...redditorNameAndAvatarFragment }\n          }  fragment reasonFragment on ModerationInfo { modQueueTriggers { message type } } \n          fragment matrixEventFragment on ChatEvent { id eventJSON sentAt moderationInfo {\n          __typename ...resolutionFragment ...reasonFragment } room { id name } sender { __typename\n          ...redditorNameAndAvatarFragment } }",
    },
    ReportComment: {
        id: "10f9e313c743",
        operation: "mutation ReportComment($input: ReportCommentInput!) { reportComment(input:\n          $input) { ok } }",
    },
    ReportForm: {
        id: "5535465b90ec",
        operation: "query ReportForm($itemId: String!, $formVersion: String!) { reportForm(itemId:\n          $itemId, formVersion: $formVersion) { form } }",
    },
    ReportPost: {
        id: "905aa92a4a9a",
        operation: "mutation ReportPost($input: ReportPostInput!) { reportPost(input: $input) { ok\n          } }",
    },
    ReportPrivateMessage: {
        id: "20d80367ba9e",
        operation: "mutation ReportPrivateMessage($input: ReportPrivateMessageInput!) {\n          reportPrivateMessage(input: $input) { ok } }",
    },
    ReportRedditor: {
        id: "b18a00b182a1",
        operation: "mutation ReportRedditor($input: ReportRedditorInput!) { reportRedditor(input:\n          $input) { ok } }",
    },
    ReportTalk: {
        id: "1eafbd11d3b3",
        operation: "mutation ReportTalk($input: ReportTalkInput!) { reportTalk(input: $input) { ok\n          } }",
    },
    TranslatedPost: {
        id: "93631ba58c67",
        operation: "query TranslatedPost($postID: ID!, $targetLanguage: String!) { postInfoById(id:\n          $postID) { __typename ... on Post { translatedContent(targetLanguage:\n          $targetLanguage) { title body } } } }",
    },
    CreatePostSet: {
        id: "d7237b9cb15d",
        operation: "mutation CreatePostSet($input: CreatePostSetInput!) { createPostSet(input:\n          $input) { ok errors { message } fieldErrors { field message } } }",
    },
    CreatePostSubmitMediaUploadLease: {
        id: "804e3925d268",
        operation: "mutation CreatePostSubmitMediaUploadLease($input: CreateMediaUploadLeaseInput!) {\n          createMediaUploadLease(input: $input) { uploadLease { uploadLeaseUrl\n          uploadLeaseHeaders { header value } } ok errors { message } } }",
    },
    CreateProfilePost: {
        id: "17312335d47a",
        operation: "mutation CreateProfilePost($input: CreatePostInput!) { createProfilePost(input:\n          $input) { post { id } websocketUrl ok errors { message } fieldErrors { __typename\n          ...fieldErrorFragment } } }  fragment fieldErrorFragment on FieldError { field message\n          }",
    },
    CreateSubredditPost: {
        id: "ddceabea38af",
        operation: "mutation CreateSubredditPost($input: CreateSubredditPostInput!) {\n          createSubredditPost(input: $input) { post { id } websocketUrl ok errors { message }\n          fieldErrors { __typename ...fieldErrorFragment } } }  fragment fieldErrorFragment on\n          FieldError { field message }",
    },
    UpdatePostSet: {
        id: "e75ab0c664b5",
        operation: "mutation UpdatePostSet($input: UpdatePostSetInput!) { updatePostSet(input:\n          $input) { ok errors { message } fieldErrors { field message } } }",
    },
    GetDiscoverPage: {
        id: "7aa2cb8ac0e9",
        operation: "query GetDiscoverPage($screenWidth: Int!) { discoverPage { discoveryUnits {\n          __typename ... on TrendingTopicsDiscoverPageUnit { schemeName title topics { id name\n          isRanked } } ... on FeaturedItemsDiscoverPageUnit { schemeName items { __typename title\n          ... on SubredditFeaturedItem { image(maxWidth: $screenWidth) { url } subreddit {\n          __typename ...SubredditInfo ...TaxonomyInfo } } } } ... on CommunitiesDiscoverPageUnit {\n          schemeName topic { id name isRanked subreddits { edges { node { __typename\n          ...SubredditInfo ...TaxonomyInfo } } } } } ... on TaxonomyTopicsDiscoverPageUnit {\n          schemeName title topics { id name isRanked } } } } }  fragment SubredditInfo on Subreddit\n          { id name publicDescriptionText styles { icon legacyIcon { url } primaryColor }\n          activeCount }  fragment TaxonomyInfo on Subreddit { taxonomy { generatedDescription } }",
    },
    GetDiscoverPageTopic: {
        id: "b6b007b94504",
        operation: "query GetDiscoverPageTopic($schemeName: String!, $topic: ID!) {\n          discoverPageTopic(schemeName: $schemeName, topic: $topic) { id name subreddits\n          { edges { node { __typename ...SubredditInfo taxonomy { generatedDescription } } } } } } \n          fragment SubredditInfo on Subreddit { id name publicDescriptionText styles { icon\n          legacyIcon { url } primaryColor } activeCount }",
    },
    EnqueuePostVideoGeneration: {
        id: "c4906d8bc9fc",
        operation: "mutation EnqueuePostVideoGeneration($postId: ID!) { enqueuePostVideoGeneration(input:\n          { postId: $postId } ) { ok errors { code message } } }",
    },
    GetGeneratedVideoPostIds: {
        id: "d68bc03da67a",
        operation: "query GetGeneratedVideoPostIds($id: ID!) { postInfoById(id: $id) { __typename\n          ... on WithGeneratedVideoPosts { videoGenerationTarget { __typename ... on Subreddit {\n          name } ... on Profile { name } } isEligibleForPostVideoGeneration videoGenerationTasks {\n          status post { __typename ... on Post { id media { status { transcodingStatus } } } } } } }\n          }",
    },
    SearchComments: {
        id: "7300d86da013",
        operation: "query SearchComments($query: String!, $sort: SearchPostSort,\n          $afterCursor: String, $filters: [FilterInput!], $productSurface:\n          String!, $pageSize: Int, $searchInput: SearchContext,\n          $includeSubredditInPosts: Boolean = true , $includeAwards: Boolean = true ,\n          $feedContext: FeedContextInput, $includeCommentPostUnits: Boolean = false ,\n          $includePostStats: Boolean = false ) { search { general(query: $query, sort:\n          $sort, filters: $filters, productSurface: $productSurface, searchInput:\n          $searchInput) { comments(after: $afterCursor, first: $pageSize) {\n          pageInfo { __typename ...pageInfoFragment } edges { node { __typename\n          ...searchCommentFragment } } feedMetadata { treatment appliedSort } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment richtextMediaFragment on Content {\n          richtextMedia { __typename ...mediaAssetFragment } }  fragment\n          redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth: 72) { __typename\n          ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename ...mediaSourceFragment }\n          icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment } icon_144:\n          icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192: icon(maxWidth: 192) {\n          __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) { __typename\n          ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename ...mediaSourceFragment\n          } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          searchPersonFragment on Redditor { __typename ...redditorFragment prefixedName isFollowed\n          isAcceptingFollowers karma { total } profile { styles { legacyIcon { url } } createdAt } }\n           fragment groupAwardFragment on Award { tiers { awardId awardingsRequired iconFormat\n          icon_16: icon(maxWidth: 16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth:\n          24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_16:\n          staticIcon(maxWidth: 16) { __typename ...mediaSourceFragment } staticIcon_24:\n          staticIcon(maxWidth: 24) { __typename ...mediaSourceFragment } staticIcon_32:\n          staticIcon(maxWidth: 32) { __typename ...mediaSourceFragment } staticIcon_48:\n          staticIcon(maxWidth: 48) { __typename ...mediaSourceFragment } staticIcon_64:\n          staticIcon(maxWidth: 64) { __typename ...mediaSourceFragment } staticIcon_96:\n          staticIcon(maxWidth: 96) { __typename ...mediaSourceFragment } } }  fragment awardFragment\n          on Award { __typename id name awardType awardSubType iconFormat icon_16: icon(maxWidth:\n          16) { __typename ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment }\n          icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth:\n          64) { __typename ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment\n          awardingTotalFragment on AwardingTotal { award { __typename ...awardFragment } total } \n          fragment authorFlairFragment on AuthorFlair { text richtext textColor template { id\n          backgroundColor isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type\n          text richtext textColor template { id isEditable backgroundColor } }  fragment\n          authorInfoFragment on RedditorInfo { __typename id ... on Redditor { name isCakeDayNow\n          icon { __typename ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename\n          ...mediaSourceFragment } snoovatarIcon { __typename ...mediaSourceFragment } profile {\n          isNsfw } accountType } ... on UnavailableRedditor { name } ... on DeletedRedditor { name }\n          }  fragment stillMediaFragment on StillMedia { source: content { __typename\n          ...mediaSourceFragment } small: content(maxWidth: 108) { __typename ...mediaSourceFragment\n          } medium: content(maxWidth: 216) { __typename ...mediaSourceFragment } large:\n          content(maxWidth: 320) { __typename ...mediaSourceFragment } xlarge: content(maxWidth:\n          640) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment feedCommentFragment on Comment { id createdAt parent { id } content {\n          __typename markdown html richtext ...richtextMediaFragment } authorInfo { __typename id\n          displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined } } } score\n          voteState permalink }  fragment postPollOptionFragment on PostPollOption { id text\n          voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on PostPoll {\n          options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }  fragment\n          searchCommentFragment on Comment { id createdAt editedAt score isScoreHidden content {\n          __typename markdown richtext ...richtextMediaFragment } authorInfo { __typename\n          ...searchPersonFragment } isOP awardings { total } parent { id } postInfo { __typename ...\n          on Post { __typename ...postFragment } flair { __typename ...postFlairFragment } } }",
    },
    SearchCommunities: {
        id: "626b5dabedef",
        operation: "query SearchCommunities($query: String!, $productSurface: String!,\n          $pageSize: Int, $afterCursor: String, $filters: [FilterInput!],\n          $searchInput: SearchContext) { search { general(query: $query, filters:\n          $filters, productSurface: $productSurface, searchInput: $searchInput) {\n          communities(after: $afterCursor, first: $pageSize) { pageInfo { __typename\n          ...pageInfoFragment } edges { node { __typename ... on Subreddit { id name prefixedName\n          styles { legacyIcon { url } icon } publicDescriptionText subscribersCount isNsfw\n          isQuarantined isSubscribed } } } feedMetadata { treatment } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }",
    },
    SearchPeople: {
        id: "7aa27ed134ce",
        operation: "query SearchPeople($query: String!, $sort: SearchPostSort, $afterCursor:\n          String, $filters: [FilterInput!], $productSurface: String!, $pageSize:\n          Int, $searchInput: SearchContext) { search { general(query: $query, sort:\n          $sort, filters: $filters, productSurface: $productSurface, searchInput:\n          $searchInput) { authors(after: $afterCursor, first: $pageSize) {\n          pageInfo { __typename ...pageInfoFragment } edges { node { __typename\n          ...searchPersonFragment } } feedMetadata { treatment } } } } }  fragment pageInfoFragment\n          on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on MediaSource { url\n          dimensions { width height } }  fragment redditorResizedIconsFragment on Redditor {\n          icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment } icon_32: icon(maxWidth:\n          32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment }\n          icon_72: icon(maxWidth: 72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth:\n          96) { __typename ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename\n          ...mediaSourceFragment } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment\n          } icon_192: icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288:\n          icon(maxWidth: 288) { __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) {\n          __typename ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename\n          id name ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } } \n          fragment searchPersonFragment on Redditor { __typename ...redditorFragment prefixedName\n          isFollowed isAcceptingFollowers karma { total } profile { styles { legacyIcon { url } }\n          createdAt } }",
    },
    SearchPosts: {
        id: "78271215900a",
        operation: "query SearchPosts($query: String!, $productSurface: String!, $pageSize:\n          Int, $afterCursor: String, $sort: SearchPostSort, $filters:\n          [FilterInput!], $searchInput: SearchContext, $includeSubredditInPosts: Boolean\n          = true , $includeAwards: Boolean = true , $feedContext: FeedContextInput,\n          $includeCommentPostUnits: Boolean = false , $includePostStats: Boolean = false\n          ) { search { general(query: $query, sort: $sort, filters: $filters,\n          productSurface: $productSurface, searchInput: $searchInput) { posts(first:\n          $pageSize, after: $afterCursor) { pageInfo { __typename ...pageInfoFragment }\n          dist edges { node { __typename ...postFragment } } feedMetadata { treatment appliedSort\n          appliedFilters { edges { node { key value } } } queryTags } } } } }  fragment\n          pageInfoFragment on PageInfo { hasNextPage endCursor }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment imageAssetFragment on ImageAsset\n          { __typename id status mimetype width height url small: preview(maxWidth: 108) {\n          __typename ...mediaSourceFragment } medium: preview(maxWidth: 216) { __typename\n          ...mediaSourceFragment } large: preview(maxWidth: 320) { __typename ...mediaSourceFragment\n          } xlarge: preview(maxWidth: 640) { __typename ...mediaSourceFragment } xxlarge:\n          preview(maxWidth: 960) { __typename ...mediaSourceFragment } xxxlarge: preview(maxWidth:\n          1080) { __typename ...mediaSourceFragment } obfuscated_small: preview(maxWidth: 108,\n          obfuscate: true) { __typename ...mediaSourceFragment } obfuscated_medium:\n          preview(maxWidth: 216, obfuscate: true) { __typename ...mediaSourceFragment }\n          obfuscated_large: preview(maxWidth: 320, obfuscate: true) { __typename\n          ...mediaSourceFragment } obfuscated_xlarge: preview(maxWidth: 640, obfuscate: true) {\n          __typename ...mediaSourceFragment } obfuscated_xxlarge: preview(maxWidth: 960, obfuscate:\n          true) { __typename ...mediaSourceFragment } obfuscated_xxxlarge: preview(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment\n          avatarExpressionMediaAssetFragment on MediaAsset { __typename ... on ExpressionMediaAsset\n          { avatar { id fullImage { url } } expression { id name assets { image { url } layer } size\n          position perspective } } }  fragment mediaAssetFragment on MediaAsset { __typename id\n          userId mimetype width height ... on VideoAsset { dashUrl hlsUrl } ...imageAssetFragment\n          ...avatarExpressionMediaAssetFragment }  fragment groupAwardFragment on Award { tiers {\n          awardId awardingsRequired iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_16: staticIcon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } staticIcon_24: staticIcon(maxWidth: 24) { __typename\n          ...mediaSourceFragment } staticIcon_32: staticIcon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } staticIcon_48: staticIcon(maxWidth: 48) { __typename\n          ...mediaSourceFragment } staticIcon_64: staticIcon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } staticIcon_96: staticIcon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } } }  fragment awardFragment on Award { __typename id name\n          awardType awardSubType iconFormat icon_16: icon(maxWidth: 16) { __typename\n          ...mediaSourceFragment } icon_24: icon(maxWidth: 24) { __typename ...mediaSourceFragment }\n          icon_32: icon(maxWidth: 32) { __typename ...mediaSourceFragment } icon_48: icon(maxWidth:\n          48) { __typename ...mediaSourceFragment } icon_64: icon(maxWidth: 64) { __typename\n          ...mediaSourceFragment } coinPrice ...groupAwardFragment }  fragment awardingTotalFragment\n          on AwardingTotal { award { __typename ...awardFragment } total }  fragment\n          authorFlairFragment on AuthorFlair { text richtext textColor template { id backgroundColor\n          isModOnly isEditable } }  fragment postFlairFragment on PostFlair { type text richtext\n          textColor template { id isEditable backgroundColor } }  fragment authorInfoFragment on\n          RedditorInfo { __typename id ... on Redditor { name isCakeDayNow icon { __typename\n          ...mediaSourceFragment } iconSmall: icon(maxWidth: 50) { __typename ...mediaSourceFragment\n          } snoovatarIcon { __typename ...mediaSourceFragment } profile { isNsfw } accountType } ...\n          on UnavailableRedditor { name } ... on DeletedRedditor { name } }  fragment\n          stillMediaFragment on StillMedia { source: content { __typename ...mediaSourceFragment }\n          small: content(maxWidth: 108) { __typename ...mediaSourceFragment } medium:\n          content(maxWidth: 216) { __typename ...mediaSourceFragment } large: content(maxWidth: 320)\n          { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640) { __typename\n          ...mediaSourceFragment } xxlarge: content(maxWidth: 960) { __typename\n          ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080) { __typename\n          ...mediaSourceFragment } }  fragment obfuscatedStillMediaFragment on StillMedia { source:\n          content(obfuscate: true) { __typename ...mediaSourceFragment } small: content(maxWidth:\n          108, obfuscate: true) { __typename ...mediaSourceFragment } medium: content(maxWidth: 216,\n          obfuscate: true) { __typename ...mediaSourceFragment } large: content(maxWidth: 320,\n          obfuscate: true) { __typename ...mediaSourceFragment } xlarge: content(maxWidth: 640,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxlarge: content(maxWidth: 960,\n          obfuscate: true) { __typename ...mediaSourceFragment } xxxlarge: content(maxWidth: 1080,\n          obfuscate: true) { __typename ...mediaSourceFragment } }  fragment animatedMediaFragment\n          on AnimatedMedia { mp4_source: variant(format: MP4) { __typename ...mediaSourceFragment }\n          mp4_small: variant(format: MP4, maxWidth: 108) { __typename ...mediaSourceFragment }\n          mp4_medium: variant(format: MP4, maxWidth: 216) { __typename ...mediaSourceFragment }\n          mp4_large: variant(format: MP4, maxWidth: 320) { __typename ...mediaSourceFragment }\n          mp4_xlarge: variant(format: MP4, maxWidth: 640) { __typename ...mediaSourceFragment }\n          mp4_xxlarge: variant(format: MP4, maxWidth: 960) { __typename ...mediaSourceFragment }\n          mp4_xxxlarge: variant(format: MP4, maxWidth: 1080) { __typename ...mediaSourceFragment }\n          gif_source: variant(format: GIF) { __typename ...mediaSourceFragment } gif_small:\n          variant(format: GIF, maxWidth: 108) { __typename ...mediaSourceFragment } gif_medium:\n          variant(format: GIF, maxWidth: 216) { __typename ...mediaSourceFragment } gif_large:\n          variant(format: GIF, maxWidth: 320) { __typename ...mediaSourceFragment } gif_xlarge:\n          variant(format: GIF, maxWidth: 640) { __typename ...mediaSourceFragment } gif_xxlarge:\n          variant(format: GIF, maxWidth: 960) { __typename ...mediaSourceFragment } gif_xxxlarge:\n          variant(format: GIF, maxWidth: 1080) { __typename ...mediaSourceFragment } }  fragment\n          streamingMediaFragment on StreamingMedia { hlsUrl: url(format: HLS) dashUrl: url(format:\n          DASH) scrubberMediaUrl dimensions { width height } duration isGif }  fragment\n          videoMediaFragment on VideoMedia { embedHtml url dimensions { width height } attribution {\n          title description authorName authorUrl providerName providerUrl } }  fragment\n          packagedMediaFragment on PackagedMedia { muxedMp4s { low { url } medium { url } high { url\n          } highest { url } recommended { url } } }  fragment downloadMediaFragment on MediaDownload\n          { url }  fragment mediaFragment on Media { previewMediaId still { __typename\n          ...stillMediaFragment } obfuscated_still: still { __typename\n          ...obfuscatedStillMediaFragment } animated { __typename ...animatedMediaFragment }\n          streaming { __typename ...streamingMediaFragment } video { __typename\n          ...videoMediaFragment } packagedMedia { __typename ...packagedMediaFragment } typeHint\n          download { __typename ...downloadMediaFragment } }  fragment redditorNameFragment on\n          RedditorInfo { __typename ... on Redditor { id name prefixedName } ... on\n          UnavailableRedditor { id name } ... on DeletedRedditor { id name } }  fragment\n          modReportsFragment on ModerationInfo { modReports { reason authorInfo { __typename\n          ...redditorNameFragment } } }  fragment userReportsFragment on ModerationInfo {\n          userReports { reason count } }  fragment modQueueTriggersFragment on ModerationInfo {\n          modQueueTriggers { type message details { __typename ... on BanEvasionTriggerDetails {\n          confidence recencyExplanation { markdown richtext } confidenceExplanation { markdown } } }\n          } }  fragment lastAuthorModNoteFragment on ModerationInfo { lastAuthorModNote { __typename\n          ... on ModUserNote { label } ... on ModUserNoteComment { label } ... on ModUserNotePost {\n          label } } }  fragment postGalleryItemFragment on PostGalleryItem { caption\n          subcaptionStrikethrough outboundUrl callToAction displayAddress adEvents { type url }\n          media { __typename ...mediaAssetFragment } }  fragment predictionTournamentFragment on\n          PredictionTournament { tournamentId name status themeId }  fragment\n          predictionOptionFragment on PredictionOption { id text voteCount totalStakeAmount\n          redditorStakeAmount }  fragment predictionFragment on Prediction { id status title isNsfw\n          isSpoiler options { __typename ...predictionOptionFragment } createdAt endsAt\n          selectedOptionId totalVoteCount totalStakeAmount wonAmount resolvedOptionId\n          voteUpdatesRemained }  fragment predictionTournamentPostFragment on PredictionTournament {\n          __typename ...predictionTournamentFragment predictions { __typename ...predictionFragment\n          } }  fragment redditorResizedIconsFragment on Redditor { icon_24: icon(maxWidth: 24) {\n          __typename ...mediaSourceFragment } icon_32: icon(maxWidth: 32) { __typename\n          ...mediaSourceFragment } icon_48: icon(maxWidth: 48) { __typename ...mediaSourceFragment }\n          icon_64: icon(maxWidth: 64) { __typename ...mediaSourceFragment } icon_72: icon(maxWidth:\n          72) { __typename ...mediaSourceFragment } icon_96: icon(maxWidth: 96) { __typename\n          ...mediaSourceFragment } icon_128: icon(maxWidth: 128) { __typename ...mediaSourceFragment\n          } icon_144: icon(maxWidth: 144) { __typename ...mediaSourceFragment } icon_192:\n          icon(maxWidth: 192) { __typename ...mediaSourceFragment } icon_288: icon(maxWidth: 288) {\n          __typename ...mediaSourceFragment } icon_384: icon(maxWidth: 384) { __typename\n          ...mediaSourceFragment } }  fragment redditorFragment on Redditor { __typename id name\n          ...redditorResizedIconsFragment snoovatarIcon { url } profile { isNsfw } }  fragment\n          audioRoomFragment on AudioRoom { roomId roomTitle metadata participantCount\n          notificationPath isLive recordingStatus recordingHlsUrl recordingDashUrl\n          recordingFallbackUrl recordingDuration topUsers { __typename ...redditorFragment } } \n          fragment talkRecordingFragment on TalkRoom { recordingDuration recordingStatus\n          recordingHlsUrl recordingDashUrl recordingFallbackUrl }  fragment talkRoomFragment on\n          TalkRoom { __typename roomId roomTitle metadata participantCount notificationPath isLive\n          roomStatus startedAt ...talkRecordingFragment topUsers { __typename ...redditorFragment }\n          }  fragment richtextMediaFragment on Content { richtextMedia { __typename\n          ...mediaAssetFragment } }  fragment feedCommentFragment on Comment { id createdAt parent {\n          id } content { __typename markdown html richtext ...richtextMediaFragment } authorInfo {\n          __typename id displayName ... on Redditor { isCakeDayNow profile { isNsfw isQuarantined }\n          } } score voteState permalink }  fragment postPollOptionFragment on PostPollOption { id\n          text voteCount totalStakeAmount redditorStakeAmount }  fragment postPollFragment on\n          PostPoll { options { __typename ...postPollOptionFragment } totalVoteCount votingEndsAt\n          selectedOptionId isPrediction totalStakeAmount resolvedOptionId wonAmount tournamentId\n          voteUpdatesRemained predictionStatus }  fragment profileFragment on Profile { redditorInfo\n          { __typename ... on Redditor { id name prefixedName accountType } } id title description {\n          markdown } subscribersCount isNsfw isSubscribed isModeratable modPermissions {\n          isAccessEnabled } whitelistStatus isDefaultIcon name isQuarantined styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } legacyPrimaryColor } }  fragment\n          adLeadGenerationInformationFragment on AdPost { leadGenerationInformation {\n          collectableUserInformation prompt disclaimerRichtext advertiserLegalName privacyPolicyUrl\n          } }  fragment adCampaignFragment on AdPost { campaign { id } }  fragment\n          postContentFragment on Post { __typename id createdAt editedAt title url content {\n          markdown richtext html richtextMedia { __typename ...mediaAssetFragment } } domain\n          isSpoiler isNsfw isLocked isSaved isReactAllowed isHidden isGildable isCrosspostable\n          isScoreHidden isArchived isStickied isPollIncluded isFollowed awardings @include(if:\n          $includeAwards) { __typename ...awardingTotalFragment } isContestMode\n          distinguishedAs voteState score commentCount viewCount authorFlair { __typename\n          ...authorFlairFragment } flair { __typename ...postFlairFragment } authorInfo { __typename\n          ...authorInfoFragment } isThumbnailEnabled thumbnail { __typename ...mediaSourceFragment }\n          media { __typename ...mediaFragment } moderationInfo { __typename ...modReportsFragment\n          ...userReportsFragment ...modQueueTriggersFragment verdict verdictAt verdictByRedditorInfo\n          { __typename ...authorInfoFragment } verdictReason reportCount isReportingIgnored\n          isRemoved ...lastAuthorModNoteFragment } suggestedCommentSort discussionType permalink\n          isSelfPost postHint postEventInfo { isFollowed isLive startsAt endsAt } gallery { items {\n          __typename ...postGalleryItemFragment } } predictionTournament(isIncludingPredictions:\n          true, isActiveOnly: false) { __typename ...predictionTournamentPostFragment } audioRoom {\n          __typename ...audioRoomFragment } talkRoom { __typename ...talkRoomFragment } ... on\n          SubredditPost { commentForest(feedContext: $feedContext) @include(if:\n          $includeCommentPostUnits) { trees { node { __typename ...feedCommentFragment } } }\n          poll { __typename ...postPollFragment } outboundLink { url expiresAt } postStats\n          @include(if: $includePostStats) { shareAllTotal } } ... on ProfilePost { profile {\n          __typename ...profileFragment } outboundLink { url expiresAt } } ... on AdPost {\n          __typename profile { __typename ...profileFragment } callToAction subcaption\n          subcaptionStrikethrough ctaMediaColor isBlank outboundLink { url expiresAt } impressionId\n          adEvents { type url } isCreatedFromAdsUi isSurveyAd promoLayout appStoreInfo { appName\n          appIcon category downloadCount appRating } adSupplementaryTextRichtext\n          ...adLeadGenerationInformationFragment ...adCampaignFragment isInAppBrowserOverride }\n          upvoteRatio isReactAllowed reactedFrom { id } attributionInfo { displayName }\n          crowdControlLevel isCrowdControlFilterEnabled languageCode isTranslatable }  fragment\n          subredditFragment on Subreddit { id name prefixedName isQuarantined title type\n          subscribersCount isNsfw isSubscribed isThumbnailsEnabled isFavorite path styles { icon\n          legacyIcon { __typename ...mediaSourceFragment } primaryColor bannerBackgroundImage\n          legacyBannerBackgroundImage legacyPrimaryColor } modPermissions { isAccessEnabled }\n          isTitleSafe isUserBanned isMediaInCommentsSettingShown allowedMediaInComments isMuted\n          isChannelsEnabled }  fragment crosspostContentFragment on Post { __typename\n          ...postContentFragment ... on SubredditPost { subreddit { __typename ...subredditFragment\n          } } }  fragment promotedCommunityPostFragment on AdPost { promotedCommunityPost {\n          __typename ... on SubredditPost { subreddit { __typename ...subredditFragment } }\n          ...postContentFragment } }  fragment promotedUserPostFragment on AdPost {\n          promotedUserPosts { __typename ... on SubredditPost { subreddit { __typename\n          ...subredditFragment } } ...postContentFragment } }  fragment postFragment on Post {\n          __typename ...postContentFragment ... on SubredditPost { subreddit @include(if:\n          $includeSubredditInPosts) { __typename ...subredditFragment } } crosspostRoot { type\n          post { __typename ...crosspostContentFragment } } ... on AdPost { __typename\n          ...promotedCommunityPostFragment ...promotedUserPostFragment\n          ...adLeadGenerationInformationFragment ...adCampaignFragment } }",
    },
    SearchTypeaheadByType: {
        id: "471853c8d37c",
        operation: "query SearchTypeaheadByType($query: String!, $filters: [FilterInput!],\n          $productSurface: String!, $searchInput: SearchContext, $limit: Int) {\n          search { typeaheadByType(query: $query, filters: $filters, productSurface:\n          $productSurface, searchInput: $searchInput, limit: $limit) {\n          feedMetadata { appliedFilters { edges { node { key value } } } queryTags } subreddits {\n          __typename ... on Subreddit { __typename ...typeaheadSubredditFragment } } profiles {\n          __typename ... on Profile { __typename ...typeaheadProfileFragmentOptimized } } } } } \n          fragment typeaheadSubredditFragment on Subreddit { id name prefixedName\n          publicDescriptionText isQuarantined subscribersCount isNsfw isSubscribed styles { icon\n          legacyIcon { url } primaryColor legacyPrimaryColor } }  fragment\n          typeaheadProfileFragmentOptimized on Profile { id createdAt redditorInfo { __typename ...\n          on Redditor { name prefixedName karma { total fromPosts fromComments fromAwardsGiven\n          fromAwardsReceived } snoovatarIcon { url } } } isSubscribed isNsfw styles { legacyIcon {\n          url } legacyPrimaryColor } }",
    },
    TrendingSearches: {
        id: "52d2369567f5",
        operation: "query TrendingSearches($searchInput: SearchContext, $productSurface: String!) {\n          recommendation { trendingQueries(productSurface: $productSurface, searchInput:\n          $searchInput) { edges { node { __typename ... on TrendingSearchElement { id\n          queryString isPromoted contextPostInfo { __typename title ... on SubredditPost { thumbnail\n          { url } } ... on AdPost { id impressionId adEvents { type url } isBlank thumbnail { url }\n          } } } } } } } }",
    },
    CancelEconRecurringPayment: {
        id: "38e04af08cb8",
        operation: "mutation CancelEconRecurringPayment($orderId: ID!) {\n          cancelEconRecurringPayment(input: { originalOrderId: $orderId } ) { ok errors {\n          message } } }",
    },
    IdentityPowerups: {
        id: "3408a37c569a",
        operation: "query IdentityPowerups { identity { __typename ... on Identity { powerups { __typename\n          ...powerupSupporterInfo } } } }  fragment subredditPowerupInfoMin on Subreddit { id name\n          prefixedName styles { icon primaryColor } }  fragment powerupAllocation on\n          PowerupsAllocation { id isPremium allocatedAt cooldownEndsAt renewOn isActive\n          isDeallocationAllowed powerups renewOn subredditInfo { __typename\n          ...subredditPowerupInfoMin } }  fragment powerupSupporterInfo on RedditorPowerupsInfo {\n          allocation { __typename ...powerupAllocation } freeCount }",
    },
    ReallocatePowerups: {
        id: "c24c37862159",
        operation: "mutation ReallocatePowerups($input: PowerupsReallocationInput!) {\n          reallocatePowerups(input: $input) { ok errors { message } } }",
    },
    RedditorPowerups: {
        id: "8d5deae7ff29",
        operation: "query RedditorPowerups($username: String!) { redditorInfoByName(name:\n          $username) { __typename ... on Redditor { powerups { supportedSubreddits {\n          __typename ...publicPowerupAllocation } } } } }  fragment subredditPowerupInfoMin on\n          Subreddit { id name prefixedName styles { icon primaryColor } }  fragment\n          publicPowerupAllocation on PublicPowerupsAllocation { powerups subredditInfo { __typename\n          ...subredditPowerupInfoMin } }",
    },
    RedditorsPowerups: {
        id: "f78349110ca5",
        operation: "query RedditorsPowerups($userIds: [ID!]!) { redditorsInfoByIds(ids: $userIds) {\n          __typename ... on Redditor { id powerups { supportedSubreddits { subredditInfo { id }\n          powerups } } } } }",
    },
    SubredditPowerupTierAndBenefits: {
        id: "152169d91bcf",
        operation: "query SubredditPowerupTierAndBenefits($subredditName: String!) {\n          subredditInfoByName(name: $subredditName) { __typename\n          ...subredditPowerupTierAndBenefitsFragment } }  fragment\n          subredditPowerupTierAndBenefitsFragment on Subreddit { id name powerups { tier count\n          benefits supportersCount tiersInfo { tier powerupsCost benefits } } powerupsSettings {\n          benefitStatuses { benefit isEnabled } } }",
    },
    SubredditTopSupporters: {
        id: "62ab28438aef",
        operation: "query SubredditTopSupporters($subredditName: String!, $type: String!) {\n          subredditInfoByName(name: $subredditName) { __typename ... on Subreddit {\n          supporters(supporterType: $type) { topSupporters { score lastSupportedAt\n          supporterInfo { __typename ... on Redditor { id name icon { url } snoovatarIcon { url }\n          profile { isNsfw } } } } } } } }",
    },
    SubredditsPowerupBenefits: {
        id: "418a93d7697f",
        operation: "query SubredditsPowerupBenefits($subredditNames: [String!]!) {\n          subredditsInfoByNames(names: $subredditNames) { __typename id name ... on Subreddit\n          { powerups { benefits } } } }",
    },
    UpdatePowerupsSettings: {
        id: "02941662fd09",
        operation: "mutation UpdatePowerupsSettings($input: UpdatePowerupsSettingsInput!) {\n          updatePowerupsSettings(input: $input) { ok powerupsSettings { benefitStatuses {\n          benefit isEnabled } } errors { message } } }",
    },
    GetPublicShowcaseOfCurrentUser: {
        id: "9d1e9f0c1a14",
        operation: "query GetPublicShowcaseOfCurrentUser($count: Int!) { identity {\n          displayedCollectibleItemsState redditor { displayedCollectibleItems(first: $count) {\n          __typename ...displayedCollectibleItemsFragment } } } }  fragment mediaSourceFragment on\n          MediaSource { url dimensions { width height } }  fragment displayedCollectibleItemFragment\n          on DisplayedCollectibleItem { isVisible item { id name drop { size } images { __typename\n          ...mediaSourceFragment } } }  fragment displayedCollectibleItemsFragment on\n          DisplayedCollectibleItemsConnection { edges { node { __typename\n          ...displayedCollectibleItemFragment } } }",
    },
    GetShowcaseOfCurrentUser: {
        id: "92305d063a5a",
        operation: "query GetShowcaseOfCurrentUser($count: Int!) { identity {\n          displayedCollectibleItemsState displayedCollectibleItems(first: $count) { __typename\n          ...displayedCollectibleItemsFragment } } }  fragment mediaSourceFragment on MediaSource {\n          url dimensions { width height } }  fragment displayedCollectibleItemFragment on\n          DisplayedCollectibleItem { isVisible item { id name drop { size } images { __typename\n          ...mediaSourceFragment } } }  fragment displayedCollectibleItemsFragment on\n          DisplayedCollectibleItemsConnection { edges { node { __typename\n          ...displayedCollectibleItemFragment } } }",
    },
    GetShowcaseOfRedditor: {
        id: "3fff4dff89de",
        operation: "query GetShowcaseOfRedditor($redditorId: ID!, $count: Int!) {\n          redditorInfoById(id: $redditorId) { __typename ... on Redditor {\n          displayedCollectibleItems(first: $count) { __typename\n          ...displayedCollectibleItemsFragment } } } }  fragment mediaSourceFragment on MediaSource\n          { url dimensions { width height } }  fragment displayedCollectibleItemFragment on\n          DisplayedCollectibleItem { isVisible item { id name drop { size } images { __typename\n          ...mediaSourceFragment } } }  fragment displayedCollectibleItemsFragment on\n          DisplayedCollectibleItemsConnection { edges { node { __typename\n          ...displayedCollectibleItemFragment } } }",
    },
    GetUsernameByUserId: {
        id: "6edad1759623",
        operation: "query GetUsernameByUserId($kindWithId: ID!) { redditorInfoById(id: $kindWithId)\n          { __typename ... on Redditor { name } } }",
    },
    UpdateShowcase: {
        id: "8a6609dd0b17",
        operation: "mutation UpdateShowcase($input: UpdateDisplayedCollectibleItemsInput!) {\n          updateDisplayedCollectibleItems(input: $input) { ok } }",
    },
    UpdateShowcaseState: {
        id: "4b1e287d3688",
        operation: "mutation UpdateShowcaseState($state: DisplayedCollectibleItemsState!) {\n          updateDisplayedCollectibleItems(input: { displayedCollectibleItemsState: $state } )\n          { ok } }",
    },
} as const;


export default GQL_FIELDS;